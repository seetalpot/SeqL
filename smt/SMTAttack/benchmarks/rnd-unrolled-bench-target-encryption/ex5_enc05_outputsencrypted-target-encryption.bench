# key=01001101101110011110011111101011111101010010011101010
INPUT(pi0)
INPUT(pi1)
INPUT(pi2)
INPUT(pi3)
INPUT(pi4)
INPUT(pi5)
INPUT(pi6)
INPUT(pi7)
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)
INPUT(keyinput13)
INPUT(keyinput14)
INPUT(keyinput15)
INPUT(keyinput16)
INPUT(keyinput17)
INPUT(keyinput18)
INPUT(keyinput19)
INPUT(keyinput20)
INPUT(keyinput21)
INPUT(keyinput22)
INPUT(keyinput23)
INPUT(keyinput24)
INPUT(keyinput25)
INPUT(keyinput26)
INPUT(keyinput27)
INPUT(keyinput28)
INPUT(keyinput29)
INPUT(keyinput30)
INPUT(keyinput31)
INPUT(keyinput32)
INPUT(keyinput33)
INPUT(keyinput34)
INPUT(keyinput35)
INPUT(keyinput36)
INPUT(keyinput37)
INPUT(keyinput38)
INPUT(keyinput39)
INPUT(keyinput40)
INPUT(keyinput41)
INPUT(keyinput42)
INPUT(keyinput43)
INPUT(keyinput44)
INPUT(keyinput45)
INPUT(keyinput46)
INPUT(keyinput47)
INPUT(keyinput48)
INPUT(keyinput49)
INPUT(keyinput50)
INPUT(keyinput51)
INPUT(keyinput52)

INPUT(keyinput53)
INPUT(keyinput54)
INPUT(keyinput55)
INPUT(keyinput56)
INPUT(keyinput57)
INPUT(keyinput58)
INPUT(keyinput59)
INPUT(keyinput60)
INPUT(keyinput61)
INPUT(keyinput62)
INPUT(keyinput63)
INPUT(keyinput64)
INPUT(keyinput65)
INPUT(keyinput66)
INPUT(keyinput67)
INPUT(keyinput68)
INPUT(keyinput69)
INPUT(keyinput70)
INPUT(keyinput71)
INPUT(keyinput72)
INPUT(keyinput73)
INPUT(keyinput74)
INPUT(keyinput75)
INPUT(keyinput76)
INPUT(keyinput77)
INPUT(keyinput78)
INPUT(keyinput79)
INPUT(keyinput80)
INPUT(keyinput81)
INPUT(keyinput82)
INPUT(keyinput83)
INPUT(keyinput84)
INPUT(keyinput85)
INPUT(keyinput86)
INPUT(keyinput87)
INPUT(keyinput88)
INPUT(keyinput89)
INPUT(keyinput90)
INPUT(keyinput91)
INPUT(keyinput92)
INPUT(keyinput93)
INPUT(keyinput94)
INPUT(keyinput95)
INPUT(keyinput96)
INPUT(keyinput97)
INPUT(keyinput98)
INPUT(keyinput99)
INPUT(keyinput100)
INPUT(keyinput101)
INPUT(keyinput102)
INPUT(keyinput103)
INPUT(keyinput104)
INPUT(keyinput105)
INPUT(keyinput106)
INPUT(keyinput107)
INPUT(keyinput108)
INPUT(keyinput109)
INPUT(keyinput110)
INPUT(keyinput111)
INPUT(keyinput112)
INPUT(keyinput113)
INPUT(keyinput114)
INPUT(keyinput115)


OUTPUT(po00$enc)
OUTPUT(po01$enc)
OUTPUT(po02$enc)
OUTPUT(po03$enc)
OUTPUT(po04$enc)
OUTPUT(po05$enc)
OUTPUT(po06$enc)
OUTPUT(po07$enc)
OUTPUT(po08$enc)
OUTPUT(po09$enc)
OUTPUT(po10$enc)
OUTPUT(po11$enc)
OUTPUT(po12$enc)
OUTPUT(po13$enc)
OUTPUT(po14$enc)
OUTPUT(po15$enc)
OUTPUT(po16$enc)
OUTPUT(po17$enc)
OUTPUT(po18$enc)
OUTPUT(po19$enc)
OUTPUT(po20$enc)
OUTPUT(po21$enc)
OUTPUT(po22$enc)
OUTPUT(po23$enc)
OUTPUT(po24$enc)
OUTPUT(po25$enc)
OUTPUT(po26$enc)
OUTPUT(po27$enc)
OUTPUT(po28$enc)
OUTPUT(po29$enc)
OUTPUT(po30$enc)
OUTPUT(po31$enc)
OUTPUT(po32$enc)
OUTPUT(po33$enc)
OUTPUT(po34$enc)
OUTPUT(po35$enc)
OUTPUT(po36$enc)
OUTPUT(po37$enc)
OUTPUT(po38$enc)
OUTPUT(po39$enc)
OUTPUT(po40$enc)
OUTPUT(po41$enc)
OUTPUT(po42$enc)
OUTPUT(po43$enc)
OUTPUT(po44$enc)
OUTPUT(po45$enc)
OUTPUT(po46$enc)
OUTPUT(po47$enc)
OUTPUT(po48$enc)
OUTPUT(po49$enc)
OUTPUT(po50$enc)
OUTPUT(po51$enc)
OUTPUT(po52$enc)
OUTPUT(po53$enc)
OUTPUT(po54$enc)
OUTPUT(po55$enc)
OUTPUT(po56$enc)
OUTPUT(po57$enc)
OUTPUT(po58$enc)
OUTPUT(po59$enc)
OUTPUT(po60$enc)
OUTPUT(po61$enc)
OUTPUT(po62$enc)

n71 = not(pi0)
n72 = not(pi1)
#n73 = not(pi2$enc)
n73 = not(pi2)
n74 = not(pi3)
n75 = not(pi4)
n76 = not(pi5)
n77 = not(pi6)
n78 = not(pi7)
n79 = and(n76, n77)
n80 = not(n79)

po00enc = xor(keyinput0, po00)
po00 = and(n75, n79)

n82 = not(po00)
n83 = and(n77, n78)

po01enc = xor(keyinput1, po01)
po01 = and(n76, n83)

n85 = and(pi5, n77)
n86 = not(n85)
n87 = and(n75, n78)
n88 = not(n87)
n89 = and(n85, n87)
po02 = and(n74, n89)
po03 = and(pi3, n89)
n92 = and(pi6, n78)
n93 = not(n92)
n94 = and(n75, n76)
n95 = not(n94)
n96 = and(n92, n94)
po04 = and(pi3, n96)
n98 = and(n75, pi5)
n99 = not(n98)
po05 = and(n92, n98)
n101 = not(po05)
n102 = and(pi3, po00)
n103 = not(n102)
#n104 = and(n72, pi2$enc)
n104 = and(n72, pi2)
n105 = not(n104)
n106 = and(n71, n104)
po06 = and(n102, n106)
n108 = and(n71, pi1)
n109 = not(n108)
n110 = and(n73, n74)
n111 = not(n110)
n112 = and(n108, n110)
n113 = and(n75, n112)
n114 = and(pi6, pi7)
n115 = and(pi5, n114)
po07 = and(n113, n115)
#n117 = and(pi1, pi2$enc)
n117 = and(pi1, pi2)
n118 = not(n117)
n119 = and(pi0, n117)
n120 = not(n119)
n121 = and(pi5, pi6)
n122 = not(n121)
n123 = and(n74, n75)
n124 = and(n121, n123)
n125 = and(n119, n124)
n126 = not(n125)
po08 = and(pi7, n125)
n128 = and(n76, n114)
n129 = and(n71, n72)
#n130 = not(n129$enc)
n130 = not(n129)
#n131 = and(pi2$enc, n74)
n131 = and(pi2, n74)
n132 = not(n131)
#n133 = and(n129$enc, n131)
n133 = and(n129, n131)
n134 = not(n133)
n135 = and(n75, n133)
n136 = not(n135)
po09 = and(n128, n135)
n138 = and(n98, n114)
n139 = and(n71, n117)
n140 = not(n139)
po10 = and(n138, n139)
n142 = and(pi0, pi1)
n143 = not(n142)
n144 = and(n110, n142)
po11 = and(n138, n144)
n146 = and(pi0, n72)
n147 = not(n146)
n148 = and(n131, n146)
n149 = not(n148)
po12 = and(n138, n148)
n151 = and(n73, pi3)
n152 = not(n151)
n153 = and(n108, n151)
po13 = and(n138, n153)
n155 = and(n146, n151)
n156 = not(n155)
po14 = and(n138, n155)
#n158 = and(pi2$enc, n108)
n158 = and(pi2, n108)
n159 = and(pi3, n98)
n160 = and(n158, n159)
po15 = and(n114, n160)
n162 = and(n142, n151)
n163 = not(n162)
po16 = and(n138, n162)
n165 = and(pi0, n73)
n166 = not(n165)
n167 = and(pi4, n76)
n168 = not(n167)
n169 = and(n72, n167)
po17 = and(n165, n169$enc)
#n171 = and(pi2$enc, n76)
n171 = and(pi2, n76)
n172 = not(n171)
n173 = nand(n71, n171)
n174 = not(n173$enc)
n175 = and(pi3, pi4)
n176 = and(n72, n175)
po18 = nand(n173$enc, n176)
n178 = and(n74, pi4)
n179 = not(n178)
n180 = and(n73, n178)
#po19 = and(n129$enc, n180)
po19 = and(n129, n180)
n182 = and(n79, n123)
n183 = not(n182)
n184 = and(n72, n73)
n185 = not(n184)
n186 = and(pi0, n184)
n187 = not(n186)
po20 = and(n182, n186)
po21 = and(n102, n186)
n190 = and(n94, n114)
po22 = and(n186, n190)
n192 = not(po22)
n193 = and(pi3, pi5)
n194 = and(n73, n193)
#po23 = and(n129$enc, n194)
po23 = and(n129, n194)
#n196 = and(n110, n129$enc)
n196 = and(n110, n129)
n197 = and(n94, n196)
po24 = and(n92, n197)
n199 = and(n76, n92)
po25 = and(n113, n199)
n201 = not(po25)
n202 = and(pi0, n74)
n203 = not(n202)
#n204 = and(pi2$enc, n190)
n204 = and(pi2, n190)
po26 = and(n202, n204)
n206 = and(n74, n94)
n207 = not(n206)
n208 = and(n158, n206)
po27 = and(n92, n208)
n210 = and(pi3, n75)
n211 = not(n210)
#n212 = and(pi2$enc, n210)
n212 = and(pi2, n210)
n213 = not(n212)
n214 = and(n146, n212)
po28 = and(n128, n214)
n216 = and(n77, pi7)
po29 = and(n197, n216)
n218 = and(n119, n206)
po30 = and(n114, n218)
n220 = and(n99, n168)
n221 = not(n220)
n222 = and(pi4, pi5)
n223 = not(n222)
n224 = and(n95, n223)
n225 = not(n224)
n226 = and(pi0, n104)
n227 = not(n226)
n228 = and(n72, n227$enc)
n229 = not(n228$enc)
n230 = and(n132$enc, n152)
n231 = not(n230)
#n232 = and(n129$enc, n231)
n232 = and(n129, n231)
n233 = not(n232)
n234 = and(n228$enc, n233)
n235 = not(n234)
n236 = and(n225, n235)
n237 = not(n236)
#n238 = and(pi2$enc, pi3)
n238 = and(pi2, pi3)
n239 = buf(n238)
n240 = and(n111, n239$enc)
n241 = not(n240)
n242 = and(n72, n241)
n243 = not(n242)
n244 = and(n94, n242)
n245 = and(n71, n244)
n246 = not(n245)
n247 = and(n237, n246)
n248 = and(n220, n247)
n249 = and(n76, pi6)
n250 = not(n249)
n251 = and(n75, n249)
n252 = not(n251)
n253 = and(n186, n251)
n254 = not(n253)
n255 = nand(n248, n254)
po31 = not(n255$enc)
n257 = and(n71, n109)
n258 = and(n71, n184)
n259 = not(n258)
n260 = and(n257, n259)
n261 = and(n134, n260)
n262 = not(n261)
n263 = and(n221, n262)
n264 = not(n263)
n265 = and(n110, n222)
n266 = not(n265)
n267 = and(n213, n266)
n268 = not(n267)
n269 = and(n71, n268)
n270 = not(n269)
n271 = and(n165, n206)
n272 = not(n271)
n273 = and(n270, n272)
n274 = not(n273)
n275 = and(n72, n274)
n276 = not(n275)
n277 = and(n237, n276)
n278 = and(n264$enc, n277)
n279 = and(n71, pi3)
n280 = not(n279)
n281 = and(n203, n280)
n282 = not(n281)
n283 = and(pi3, pi6)
n284 = not(n283)
n285 = and(n74, n77)
n286 = not(n285)
n287 = and(n284, n286)
n288 = not(n287)
n289 = and(n281, n288)
n290 = and(n94, n289)
n291 = and(n184, n290)
n292 = not(n291)
n293 = and(n278, n292)
n294 = and(n190, n196)
n295 = not(n294)
n296 = and(n293, n295)
po32 = not(n296)
n298 = and(n138, n226)
n299 = not(n298)
n300 = and(n75, n77)
n301 = not(n300)
n302 = and(n75, n301)
n303 = not(n302)
#n304 = and(pi0, pi2$enc)
n304 = and(pi0, pi2)
n305 = not(n304)
n306 = and(n93, n304)
n307 = and(n302, n306)
n308 = and(n299, n307)
n309 = and(n142, n238)
n310 = not(n309)
n311 = and(n190, n309)
n312 = not(n311)
n313 = and(n308, n312)
po33 = not(n313)
#n315 = and(n129$enc, n249)
n315 = and(n129, n249)
n316 = not(n315)
n317 = and(n86, n316)
n318 = not(n317)
n319 = and(pi7, n318)
n320 = not(n319)
n321 = and(n146, n199)
n322 = not(n321)
n323 = and(n320, n322)
n324 = not(n323)
n325 = and(n75, n324)
n326 = not(n325)
#n327 = and(n129$enc, n167)
n327 = and(n129, n167)
n328 = not(n327)
n329 = and(pi1, n76)
n330 = not(n329)
n331 = and(n328, n330)
n332 = and(n86, n250)
n333 = not(n332)
n334 = and(n75, n332)
n335 = not(n334)
n336 = and(n223, n335)
n337 = and(n331, n336)
n338 = and(n326, n337)
n339 = and(n71, n73)
n340 = and(n87, n339)
n341 = not(n340)
n342 = and(n88, n304)
n343 = buf(n342)
n344 = and(n341, n343$enc)
n345 = not(n344)
n346 = and(pi6, n345)
n347 = not(n346)
#n348 = and(pi2$enc, n77)
n348 = and(pi2, n77)
n349 = and(pi0, pi4)
n350 = and(n348, n349)
n351 = not(n350)
n352 = and(n347, n351)
n353 = buf(n352)
n354 = and(n76, n353$enc)
n355 = and(n72, n354)
n356 = not(n355)
n357 = and(n338, n356)
n358 = and(n74, n85)
n359 = not(n358)
n360 = and(pi3, n249)
n361 = and(n106, n360)
n362 = not(n361)
n363 = and(n359, n362)
n364 = not(n363)
n365 = and(n87, n364)
n366 = not(n365)
n367 = and(n357, n366)
po34 = not(n367)
n369 = and(n72, pi4)
n370 = and(n305, n369)
#n371 = and(n71, pi2$enc)
n371 = and(n71, pi2)
n372 = not(n371)
n373 = and(n166, n372)
n374 = not(n373)
n375 = and(n169$enc, n374)
n376 = not(n375)
n377 = and(n370, n376)
n378 = and(n71, n369)
n379 = and(n74, n76)
n380 = not(n379)
n381 = and(n240, n380)
n382 = and(n378, n381)
n383 = not(n382)
n384 = and(n377, n383)
po35 = not(n384)
n386 = and(n133, n190)
n387 = not(n386)
n388 = and(n71, pi4)
n389 = not(n388)
n390 = and(pi0, n75)
n391 = not(n390)
n392 = and(n389, n391)
n393 = not(n392)
n394 = and(n374, n392)
n395 = and(n72, n76)
n396 = not(n395)
n397 = and(n394, n395)
n398 = and(pi3, n94)
n399 = not(n398)
n400 = and(n183, n399)
n401 = not(n400)
n402 = and(n106, n401)
n403 = not(n402)
n404 = and(n397, n403)
n405 = and(n387, n404)
po36 = not(n405)
n407 = and(pi0, n147)
n408 = not(n407)
n409 = and(n74, n408)
n410 = not(n409)
n411 = and(pi0, n143)
n412 = not(n411)
n413 = and(n175, n412)
n414 = not(n413)
n415 = and(n410, n414)
n416 = and(n72, pi5)
n417 = not(n416)
n418 = and(n330, n417)
n419 = not(n418)
n420 = and(pi0, n419)
n421 = not(n420)
n422 = and(n224, n389)
n423 = and(n421, n422)
n424 = nand(pi3, n423)
n425 = not(n424$enc)
n426 = and(n415$enc, n425)
n427 = and(pi1, pi3)
n428 = not(n427)
n429 = and(n72, n74)
n430 = not(n429)
n431 = and(n428, n430)
n432 = not(n431)
n433 = and(n396, n431)
n434 = and(n304, n433)
n435 = not(n434)
n436 = and(n426$enc, n435)
n437 = and(n103, n436)
n438 = and(pi3, n190)
n439 = not(n438)
n440 = and(n437, n439)
po37 = not(n440)
n442 = and(pi0, pi3)
n443 = not(n442)
n444 = and(n71, n74)
n445 = not(n444)
n446 = and(n443, n445)
n447 = not(n446)
n448 = and(n73, n98)
n449 = not(n448)
n450 = and(n447, n448)
n451 = and(n72, n450)
n452 = not(n451)
n453 = and(n239$enc, n392)
n454 = not(n453)
n455 = and(n71, n75)
n456 = not(n455)
n457 = and(n111, n456)
n458 = not(n457)
n459 = and(n454, n458)
n460 = not(n459$enc)
n461 = and(n234, n460)
n462 = and(n452, n461)
n463 = and(n292, n462)
n464 = and(n295, n463)
po38 = not(n464)
n466 = and(n71, n249)
n467 = not(n466)
n468 = and(n75, n467)
n469 = and(n333$enc, n468)
n470 = and(n359, n469)
n471 = and(pi5, n216)
n472 = not(n471)
n473 = and(pi0, n199)
n474 = not(n473)
n475 = and(n472, n474)
n476 = not(n475)
n477 = and(n75, n476)
n478 = not(n477)
n479 = and(n74, n474)
n480 = not(n479)
n481 = and(n477, n480)
n482 = not(n481)
n483 = and(n470, n482)
n484 = and(n142, n190)
n485 = not(n484)
n486 = and(n483$enc, n485)
n487 = and(n146, n204)
n488 = not(n487)
n489 = and(n486, n488)
po39 = not(n489)
n491 = and(n241, n257)
n492 = not(n491)
n493 = and(n221, n492)
n494 = not(n493)
n495 = and(n71, n231)
n496 = not(n495)
n497 = and(pi0, n238)
n498 = not(n497)
n499 = and(n496, n498)
#n500 = and(pi2$enc, n280)
n500 = and(pi2, n280)
n501 = not(n500)
n502 = and(n73, n279)
n503 = not(n502)
n504 = and(n501, n503)
n505 = and(pi1, n504)
n506 = not(n505)
n507 = and(n499, n506)
n508 = not(n507)
n509 = and(n225, n508)
n510 = not(n509)
n511 = and(pi0, n178)
n512 = not(n511)
#n513 = and(n129$enc, n210)
n513 = and(n129, n210)
n514 = not(n513)
n515 = and(n512, n514)
n516 = not(n515)
n517 = and(pi5, n516)
n518 = not(n517)
#n519 = and(n129$enc, n398)
n519 = and(n129, n398)
n520 = not(n519)
n521 = and(n518, n520)
n522 = not(n521)
#n523 = and(pi2$enc, n522)
n523 = and(pi2, n522)
n524 = not(n523)
n525 = and(n74, n98)
n526 = not(n525)
n527 = and(n258, n525)
n528 = not(n527)
n529 = and(n524, n528)
n530 = and(n510, n529)
n531 = nand(n494, n530)
n532 = and(pi1, n73)
n533 = not(n532)
#n534 = and(pi2$enc, pi6)
n534 = and(pi2, pi6)
n535 = not(n534)
n536 = and(n73, n77)
n537 = not(n536)
n538 = and(n535, n537)
n539 = not(n538)
n540 = and(n533, n538)
n541 = and(n239$enc, n540)
n542 = and(pi0, n541)
n543 = not(n542)
n544 = and(n77, n196)
n545 = not(n544)
n546 = and(n543, n545)
n547 = not(n546)
n548 = and(n94, n547)
n549 = not(n548)
n550 = and(n531$enc, n549)
#n551 = and(pi2$enc, n78)
n551 = and(pi2, n78)
n552 = and(pi0, n551)
n553 = not(n552)
n554 = and(pi7, n258)
n555 = not(n554)
n556 = and(n553, n555)
n557 = not(n556)
n558 = and(n123, n249)
n559 = not(n558)
n560 = and(n557, n558)
n561 = not(n560)
n562 = and(n550, n561)
po40 = not(n562)
n564 = and(pi1, n74)
n565 = not(n564)
n566 = and(n72, pi3)
n567 = not(n566)
n568 = and(n565, n567)
n569 = not(n568)
n570 = and(n165, n569)
n571 = and(pi3, n76)
n572 = and(n73, n571)
n573 = not(n572)
n574 = and(n146, n572)
n575 = not(n574)
n576 = and(n570, n575)
po41 = not(n576)
n578 = and(n469, n478)
n579 = and(pi1, n75)
n580 = and(pi0, n579)
n581 = and(n128, n580)
n582 = not(n581)
n583 = and(n578, n582)
n584 = and(n148, n190)
n585 = not(n584)
n586 = and(n583, n585)
po42 = not(n586)
n588 = and(n80, n122)
n589 = not(n588)
n590 = and(n228$enc, n456)
n591 = not(n590)
n592 = and(n589, n591)
n593 = not(n592)
n594 = and(n229, n333$enc)
n595 = and(pi4, n594)
n596 = not(n595)
n597 = and(n71, n329)
n598 = not(n597)
n599 = and(n421, n598)
n600 = not(n599)
n601 = and(n73, n600)
n602 = not(n601)
n603 = and(n174, n602)
n604 = not(n603)
n605 = and(n75, pi6)
n606 = and(n604, n605)
n607 = not(n606$enc)
n608 = and(n596, n607)
n609 = and(n593, n608)
n610 = and(n322, n472)
n611 = and(n142, n551)
n612 = not(n611)
n613 = and(n555, n612)
n614 = buf(n613)
n615 = and(n249, n614$enc)
n616 = not(n615)
n617 = and(n610, n616)
n618 = not(n617)
n619 = and(n75, n618)
n620 = not(n619)
n621 = and(n609, n620)
n622 = and(n75, pi7)
n623 = not(n622)
n624 = and(n258, n623)
n625 = not(n624)
n626 = and(n119, n622)
n627 = not(n626)
n628 = and(n625, n627)
n629 = not(n628)
n630 = and(pi6, n629)
n631 = not(n630$enc)
n632 = and(n72, n536)
n633 = and(n388, n632)
n634 = not(n633)
n635 = and(n631, n634)
n636 = not(n635)
n637 = and(n76, n636)
n638 = not(n637)
n639 = and(n73, pi4)
#n640 = and(n129$enc, n639)
n640 = and(n129, n639)
n641 = buf(n640)
n642 = and(pi5, n640)
n643 = not(n642)
n644 = and(n638, n643)
n645 = not(n644)
n646 = and(pi3, n645)
n647 = not(n646)
n648 = nand(n106, n178)
n649 = not(n648$enc)
n650 = and(n647, n649)
n651 = and(n621, n650)
po43 = not(n651)
n653 = and(n72, n110)
n654 = and(n393, n653)
n655 = and(n526, n559)
n656 = not(n655)
n657 = and(n186, n656)
n658 = not(n657)
n659 = and(n654, n658)
po44 = not(n659)
n661 = and(n118, n185)
n662 = not(n661)
n663 = and(n71, n641$enc)
n664 = and(n662, n663)
n665 = nand(pi5, n662)
n666 = not(n665$enc)
n667 = and(n105, n533)
n668 = and(n76, n667)
n669 = and(n539, n668)
n670 = not(n669)
n671 = and(n666, n670)
n672 = not(n671)
n673 = and(n455, n672)
n674 = not(n673)
n675 = and(n664, n674)
n676 = and(n73, n75)
n677 = and(n199, n676)
#n678 = and(n129$enc, n677)
n678 = and(n129, n677)
n679 = not(n678)
n680 = and(n675, n679)
po45 = not(n680)
n682 = and(n71, n532)
n683 = and(n525, n682)
n684 = not(n683)
n685 = and(n112, n684)
n686 = and(n201, n685)
po46 = not(n686)
n688 = and(n187, n667)
n689 = and(n120, n259)
n690 = not(n689)
n691 = and(pi4, n690)
n692 = not(n691)
n693 = and(n688, n692)
n694 = and(n71, n665$enc)
n695 = not(n694)
n696 = and(n142, n171)
n697 = not(n696)
n698 = and(n695, n697)
n699 = not(n698)
n700 = and(n75, n699)
n701 = not(n700)
n702 = and(n693, n701)
n703 = and(n71, n669)
n704 = not(n703)
#n705 = and(pi2$enc, n85)
n705 = and(pi2, n85)
n706 = not(n705)
n707 = and(n142, n705)
n708 = not(n707)
n709 = and(n704, n708)
n710 = not(n709)
n711 = and(n75, n710)
n712 = not(n711)
n713 = and(n702$enc, n712)
n714 = and(n126, n713)
#n715 = and(pi2$enc, n193)
n715 = and(pi2, n193)
n716 = and(n142, n715)
n717 = not(n716)
n718 = and(n73, n76)
n719 = not(n718)
#n720 = and(n129$enc, n718)
n720 = and(n129, n718)
n721 = not(n720)
n722 = and(n717, n721)
n723 = not(n722)
n724 = and(n92, n723)
n725 = and(n75, n724)
n726 = not(n725)
n727 = and(n714, n726)
po47 = not(n727)
n729 = and(n75, n588)
n730 = not(n729)
#n731 = and(n129$enc, n151)
n731 = and(n129, n151)
n732 = and(n101, n731)
n733 = and(n730, n732)
po48 = not(n733)
#n735 = nand(pi2$enc, pi4)
n735 = nand(pi2, pi4)
#n736 = and(n129$enc, n735$enc)
n736 = and(n129, n735$enc)
n737 = not(n736)
n738 = and(pi3, n736)
n739 = not(n738)
n740 = and(n260, n739)
n741 = and(n99, n252)
n742 = not(n741)
n743 = and(n106, n742)
n744 = not(n743)
n745 = and(n740, n744)
po49 = not(n745)
n747 = and(n128, n676)
n748 = and(n192, n747)
n749 = and(n144, n190)
n750 = not(n749)
n751 = and(n748, n750)
po50 = not(n751)
n753 = and(n109, n147)
n754 = and(n737, n753)
n755 = and(n120, n130)
n756 = not(n755)
n757 = and(n98, n756)
n758 = not(n757)
n759 = and(n754, n758)
n760 = and(pi0, n427)
n761 = not(n760)
n762 = and(n179, n207)
n763 = not(n762)
#n764 = nand(n129$enc, n763)
n764 = nand(n129, n763)
n765 = not(n764$enc)
n766 = and(n761, n765)
n767 = not(n766)
n768 = and(n73, n767)
n769 = buf(n768)
n770 = and(n106, n206)
n771 = not(n770)
n772 = and(n769$enc, n771)
n773 = and(n759, n772)
n774 = and(pi0, n532)
n775 = and(n358, n774)
n776 = not(n775)
n777 = and(n71, n566)
n778 = not(n777)
n779 = and(pi0, n564)
n780 = not(n779)
n781 = and(n778$enc, n780)
n782 = and(n310, n781)
n783 = not(n782)
n784 = and(n249, n783$enc)
n785 = not(n784)
n786 = and(n776, n785)
n787 = not(n786$enc)
n788 = and(n75, n787)
n789 = not(n788)
n790 = and(n773, n789)
n791 = and(po05, n144)
n792 = not(n791)
n793 = and(n790, n792)
po51 = not(n793)
n795 = and(n73, n206)
n796 = not(n795)
n797 = and(pi4, n230)
n798 = and(n443, n797)
n799 = not(n798)
n800 = and(n796, n799)
n801 = not(n800)
n802 = and(n72, n801)
n803 = not(n802)
n804 = and(n109, n443)
n805 = and(n99, n804)
n806 = and(n803, n805)
n807 = and(n72, n131)
n808 = not(n807)
n809 = and(n781, n808)
n810 = not(n809)
n811 = and(n251, n810)
n812 = not(n811)
n813 = and(n806, n812)
po52 = not(n813$enc)
n815 = and(pi1, n110)
n816 = not(n815)
n817 = and(n243, n816)
n818 = not(n817)
n819 = and(n76, n818)
n820 = not(n819)
n821 = and(pi5, n231)
n822 = and(pi1, n821)
n823 = not(n822)
n824 = and(n820, n823)
n825 = not(n824)
n826 = and(n75, n825)
n827 = not(n826)
n828 = and(n75, n230)
n829 = not(n828)
n830 = and(pi1, n111)
n831 = not(n830)
n832 = and(n829, n831)
n833 = not(n832)
n834 = and(n827, n833)
n835 = and(n282, n526)
#n836 = and(pi2$enc, n835)
n836 = and(pi2, n835)
n837 = not(n836)
n838 = and(n165, n525)
n839 = not(n838)
n840 = and(n837, n839)
n841 = not(n840)
n842 = and(pi1, n841)
n843 = not(n842)
n844 = and(n159, n226)
n845 = not(n844)
n846 = and(n843, n845)
n847 = and(n834, n846)
n848 = and(n231, n249)
n849 = and(pi1, n848)
n850 = not(n849)
n851 = and(n85, n818)
n852 = not(n851)
n853 = and(n850, n852)
n854 = not(n853)
n855 = nand(n71, n854)
n856 = not(n855$enc)
n857 = and(n184, n358)
n858 = buf(n857)
n859 = and(n250, n706$enc)
n860 = not(n859)
n861 = nand(n427, n860)
n862 = not(n861$enc)
n863 = and(n858$enc, n862)
n864 = not(n863)
n865 = and(pi0, n864)
n866 = not(n865)
n867 = and(n856, n866)
n868 = not(n867)
n869 = and(n75, n868)
n870 = not(n869)
n871 = and(n847, n870)
n872 = and(n71, n818)
n873 = not(n872)
n874 = and(pi0, n568)
n875 = and(n241, n874)
n876 = not(n875)
n877 = and(n873, n876)
n878 = not(n877)
n879 = and(po05, n878)
n880 = not(n879)
n881 = and(n871, n880)
po53 = not(n881)
n883 = and(n243, n310)
n884 = and(n179, n211)
n885 = not(n884)
n886 = and(n774, n885)
n887 = not(n886)
n888 = and(n883, n887)
n889 = and(n75, n147)
n890 = not(n889$enc)
n891 = and(n231, n890)
n892 = not(n891)
n893 = and(n888, n892)
n894 = and(n74, pi5)
n895 = and(n73, n894)
n896 = not(n895)
n897 = and(n108, n895)
n898 = not(n897)
n899 = and(n496, n780)
n900 = not(n899)
n901 = and(n76, n900)
n902 = not(n901)
n903 = and(n898, n902)
n904 = not(n903)
n905 = and(n75, n904)
n906 = not(n905)
n907 = and(n893, n906)
n908 = and(n71, n131)
n909 = not(n908)
n910 = and(n281, n909)
n911 = not(n910)
n912 = and(n85, n911)
n913 = not(n912)
n914 = and(n241, n466)
n915 = buf(n914)
n916 = and(n913, n915$enc)
n917 = not(n916)
n918 = and(pi1, n917)
n919 = not(n918)
n920 = and(n85, n232)
n921 = not(n920)
n922 = and(n919, n921)
n923 = not(n922)
n924 = and(n75, n923)
n925 = not(n924)
n926 = and(n907, n925)
n927 = and(pi1, n911)
n928 = not(n927)
n929 = and(n233, n928)
n930 = not(n929)
n931 = and(po05, n930)
n932 = not(n931)
n933 = and(n926, n932)
po54 = not(n933)
n935 = and(n98, n108)
n936 = not(n935)
n937 = and(pi1, n936)
n938 = and(n75, n95)
n939 = not(n938)
#n940 = and(pi2$enc, n939)
n940 = and(pi2, n939)
n941 = not(n940)
n942 = nand(n449, n941)
n943 = not(n942$enc)
n944 = and(n142, n943)
n945 = not(n944)
n946 = and(n937, n945$enc)
n947 = and(n249, n305)
n948 = not(n947)
n949 = and(pi0, n705)
n950 = not(n949)
n951 = and(n948, n950)
n952 = not(n951)
n953 = and(n579, n952)
n954 = not(n953)
n955 = and(n946, n954)
n956 = and(n75, n82)
n957 = not(n956)
n958 = and(n144, n957)
n959 = not(n958)
n960 = and(n955, n959$enc)
n961 = and(po05, n119)
n962 = not(n961)
n963 = and(n960, n962)
po55 = not(n963)
n965 = and(n71, n735$enc)
n966 = not(n965)
n967 = and(n104, n210)
n968 = not(n967)
n969 = and(n816, n968)
n970 = and(n966, n969)
n971 = and(n71, n259)
n972 = and(n970, n971)
#n973 = and(pi2$enc, pi5)
n973 = and(pi2, pi5)
n974 = not(n973)
n975 = nand(n719, n974)
n976 = and(n111, n975$enc)
n977 = and(n567, n976)
n978 = and(n455, n977)
n979 = not(n978)
n980 = and(n972, n979)
n981 = and(n567, n705)
n982 = and(n455, n981)
n983 = not(n982)
n984 = and(n980, n983)
n985 = and(n573, n974)
n986 = not(n985)
n987 = and(n567, n986$enc)
n988 = and(n92, n987)
n989 = nand(n455, n988)
n990 = not(n989$enc)
n991 = and(n984, n990)
po56 = not(n991)
n993 = and(n282, n532)
n994 = not(n993)
n995 = and(n136, n994)
n996 = and(n147, n966)
n997 = and(n689, n996)
n998 = and(n995, n997)
n999 = and(n172, n896)
n1000 = not(n999)
n1001 = and(n71, n1000)
n1002 = not(n1001)
n1003 = and(n165, n193)
n1004 = not(n1003)
n1005 = and(n1002, n1004)
n1006 = not(n1005)
n1007 = and(pi1, n1006)
n1008 = not(n1007)
n1009 = and(n106, n571)
n1010 = not(n1009)
n1011 = and(n1008, n1010)
n1012 = not(n1011)
n1013 = and(n75, n1012)
n1014 = not(n1013)
n1015 = and(n998, n1014$enc)
n1016 = and(n430, n705)
n1017 = and(n455, n1016)
n1018 = not(n1017)
n1019 = and(n1015, n1018)
n1020 = and(n73, n379)
n1021 = not(n1020)
n1022 = and(n974, n1021)
n1023 = not(n1022)
n1024 = and(n71, n1023)
n1025 = not(n1024)
n1026 = and(n165, n571)
n1027 = not(n1026)
n1028 = and(n1025, n1027)
n1029 = not(n1028)
n1030 = and(pi1, n1029)
n1031 = not(n1030)
#n1032 = and(n129$enc, n715)
n1032 = and(n129, n715)
n1033 = not(n1032)
n1034 = and(n1031, n1033)
n1035 = not(n1034$enc)
n1036 = and(n92, n1035)
n1037 = and(n75, n1036)
n1038 = not(n1037)
n1039 = and(n1019, n1038)
po57 = not(n1039)
n1041 = and(pi3, n156)
n1042 = and(n662, n692)
n1043 = and(n701, n1042)
n1044 = and(n712, n1043)
n1045 = and(n1041, n1044)
n1046 = and(n142, n973)
n1047 = not(n1046)
n1048 = and(n721, n1047)
n1049 = not(n1048)
n1050 = and(n92, n1049)
n1051 = and(n210, n1050)
n1052 = not(n1051)
n1053 = and(n1045, n1052)
po58 = not(n1053)
n1055 = and(pi4, n305)
n1056 = not(n1055)
n1057 = and(n99, n1056)
n1058 = and(pi0, n539)
n1059 = not(n1058)
n1060 = and(n71, n77)
n1061 = not(n1060)
n1062 = and(n1059, n1061)
n1063 = not(n1062)
n1064 = and(n94, n1063)
n1065 = not(n1064)
n1066 = and(n1057, n1065)
n1067 = and(n140, n187)
n1068 = not(n1067)
n1069 = and(n251, n1068)
n1070 = not(n1069)
n1071 = and(n1066, n1070)
n1072 = and(n303, n432)
#n1073 = and(pi2$enc, n1072)
n1073 = and(pi2, n1072)
n1074 = not(n1073)
n1075 = and(n605, n815)
n1076 = not(n1075)
n1077 = and(n1074$enc, n1076)
n1078 = not(n1077)
n1079 = and(n76, n1078)
n1080 = not(n1079)
n1081 = and(n222, n432)
#n1082 = and(pi2$enc, n1081)
n1082 = and(pi2, n1081)
n1083 = not(n1082)
n1084 = and(n1080, n1083)
n1085 = not(n1084)
n1086 = and(pi0, n1085)
n1087 = not(n1086)
n1088 = and(n210, n249)
n1089 = not(n1088)
n1090 = and(n106, n1088)
n1091 = not(n1090)
n1092 = nand(n1087, n1091)
n1093 = and(n1071, n1092$enc)
#n1094 = and(pi2$enc, n808)
n1094 = and(pi2, n808)
n1095 = not(n1094)
n1096 = and(n71, n1095)
n1097 = not(n1096)
n1098 = and(n163, n1097)
n1099 = not(n1098)
n1100 = and(n96, n1099)
n1101 = not(n1100)
n1102 = and(n1093, n1101)
po59 = not(n1102)
n1104 = and(n392, n753)
n1105 = and(n443, n1104)
n1106 = and(n75, n232)
n1107 = not(n1106)
n1108 = and(n1105, n1107)
n1109 = and(n246, n1108)
n1110 = and(n85, n242)
n1111 = and(n455, n1110)
n1112 = not(n1111)
n1113 = and(n1109, n1112)
n1114 = and(po05, n242)
n1115 = and(n71, n1114)
n1116 = not(n1115)
n1117 = and(n1113, n1116)
po60 = not(n1117)
n1119 = and(n226, n1089)
n1120 = and(n149, n845)
n1121 = and(n1119, n1120)
po61 = buf(n1121)
n1123 = and(n252, n779)
n1124 = and(n526, n1123)
po62 = not(n1124)
#n129$enc = xor(keyinput0, n129)
#pi2$enc = xor(keyinput1, pi2$inv)
#pi2$inv = not(pi2)
n132$enc = xor(keyinput2, n132)
n169$enc = xor(keyinput3, n169)
n173$enc = xor(keyinput4, n173)
po18enc = xor(keyinput5, po18)
n333$enc = xor(keyinput6, n333)
n227$enc = xnor(keyinput7, n227)
n228$enc = xnor(keyinput8, n228)
n239$enc = xnor(keyinput9, n239)
n255$enc = xor(keyinput10, n255)
n264$enc = xnor(keyinput11, n264)
n606$enc = xnor(keyinput12, n606)
n343$enc = xnor(keyinput13, n343)
n353$enc = xnor(keyinput14, n353)
n415$enc = xnor(keyinput15, n415)
n424$enc = xor(keyinput16, n424)
n426$enc = xnor(keyinput17, n426)
n459$enc = xnor(keyinput18, n459)
n483$enc = xor(keyinput19, n483)
n531$enc = xnor(keyinput20, n531)
n1092$enc = xor(keyinput21, n1092)
po61enc = xor(keyinput22, po61)
n614$enc = xor(keyinput23, n614)
n630$enc = xnor(keyinput24, n630)
n641$enc = xor(keyinput25, n641)
n648$enc = xor(keyinput26, n648)
po43enc = xor(keyinput27, po43)
n665$enc = xor(keyinput28, n665)
n702$enc = xor(keyinput29, n702)
n706$enc = xnor(keyinput30, n706)
n735$enc = xor(keyinput31, n735)
n764$enc = xor(keyinput32, n764)
n769$enc = xor(keyinput33, n769)
n778$enc = xnor(keyinput34, n778)
n783$enc = xnor(keyinput35, n783)
n786$enc = xor(keyinput36, n786)
n813$enc = xnor(keyinput37, n813)
n855$enc = xnor(keyinput38, n855)
n858$enc = xor(keyinput39, n858)
n861$enc = xnor(keyinput40, n861)
n889$enc = xor(keyinput41, n889)
n915$enc = xor(keyinput42, n915)
n942$enc = xnor(keyinput43, n942)
n945$enc = xor(keyinput44, n945)
n959$enc = xnor(keyinput45, n959)
n975$enc = xor(keyinput46, n975)
n986$enc = xnor(keyinput47, n986)
n989$enc = xnor(keyinput48, n989)
po56enc = xnor(keyinput49, po56)
n1014$enc = xor(keyinput50, n1014)
n1034$enc = xnor(keyinput51, n1034)
n1074$enc = xor(keyinput52, n1074)


#locking last scan-cell in scan-chain
po00$enc = xor(keyinput53, po00enc);

#locking next scan-cell in scan-chain
po01$enc = xor(keyinput53, po01$enc_1);
po01$enc_1 = xor(keyinput54, po01enc);

#locking next scan-cell in scan-chain
po02$enc = xor(keyinput53, po02$enc_2);
po02$enc_2 = xor(keyinput54, po02$enc_1);
po02$enc_1 = xor(keyinput55, po02);

#locking next scan-cell in scan-chain
po03$enc = xor(keyinput53, po03$enc_3);
po03$enc_3 = xor(keyinput54, po03$enc_2);
po03$enc_2 = xor(keyinput55, po03$enc_1);
po03$enc_1 = xor(keyinput56, po03);

#locking next scan-cell in scan-chain
po04$enc = xor(keyinput53, po04$enc_4);
po04$enc_4 = xor(keyinput54, po04$enc_3);
po04$enc_3 = xor(keyinput55, po04$enc_2);
po04$enc_2 = xor(keyinput56, po04$enc_1);
po04$enc_1 = xor(keyinput57, po04);

#locking next scan-cell in scan-chain
po05$enc = xor(keyinput53, po05$enc_5);
po05$enc_5 = xor(keyinput54, po05$enc_4);
po05$enc_4 = xor(keyinput55, po05$enc_3);
po05$enc_3 = xor(keyinput56, po05$enc_2);
po05$enc_2 = xor(keyinput57, po05$enc_1);
po05$enc_1 = xor(keyinput58, po05);

#locking next scan-cell in scan-chain
po06$enc = xor(keyinput53, po06$enc_6);
po06$enc_6 = xor(keyinput54, po06$enc_5);
po06$enc_5 = xor(keyinput55, po06$enc_4);
po06$enc_4 = xor(keyinput56, po06$enc_3);
po06$enc_3 = xor(keyinput57, po06$enc_2);
po06$enc_2 = xor(keyinput58, po06$enc_1);
po06$enc_1 = xor(keyinput59, po06);

#locking next scan-cell in scan-chain
po07$enc = xor(keyinput53, po07$enc_7);
po07$enc_7 = xor(keyinput54, po07$enc_6);
po07$enc_6 = xor(keyinput55, po07$enc_5);
po07$enc_5 = xor(keyinput56, po07$enc_4);
po07$enc_4 = xor(keyinput57, po07$enc_3);
po07$enc_3 = xor(keyinput58, po07$enc_2);
po07$enc_2 = xor(keyinput59, po07$enc_1);
po07$enc_1 = xor(keyinput60, po07);

#locking next scan-cell in scan-chain
po08$enc = xor(keyinput53, po08$enc_8);
po08$enc_8 = xor(keyinput54, po08$enc_7);
po08$enc_7 = xor(keyinput55, po08$enc_6);
po08$enc_6 = xor(keyinput56, po08$enc_5);
po08$enc_5 = xor(keyinput57, po08$enc_4);
po08$enc_4 = xor(keyinput58, po08$enc_3);
po08$enc_3 = xor(keyinput59, po08$enc_2);
po08$enc_2 = xor(keyinput60, po08$enc_1);
po08$enc_1 = xor(keyinput61, po08);

#locking next scan-cell in scan-chain
po09$enc = xor(keyinput53, po09$enc_9);
po09$enc_9 = xor(keyinput54, po09$enc_8);
po09$enc_8 = xor(keyinput55, po09$enc_7);
po09$enc_7 = xor(keyinput56, po09$enc_6);
po09$enc_6 = xor(keyinput57, po09$enc_5);
po09$enc_5 = xor(keyinput58, po09$enc_4);
po09$enc_4 = xor(keyinput59, po09$enc_3);
po09$enc_3 = xor(keyinput60, po09$enc_2);
po09$enc_2 = xor(keyinput61, po09$enc_1);
po09$enc_1 = xor(keyinput62, po09);

#locking next scan-cell in scan-chain
po10$enc = xor(keyinput53, po10$enc_10);
po10$enc_10 = xor(keyinput54, po10$enc_9);
po10$enc_9 = xor(keyinput55, po10$enc_8);
po10$enc_8 = xor(keyinput56, po10$enc_7);
po10$enc_7 = xor(keyinput57, po10$enc_6);
po10$enc_6 = xor(keyinput58, po10$enc_5);
po10$enc_5 = xor(keyinput59, po10$enc_4);
po10$enc_4 = xor(keyinput60, po10$enc_3);
po10$enc_3 = xor(keyinput61, po10$enc_2);
po10$enc_2 = xor(keyinput62, po10$enc_1);
po10$enc_1 = xor(keyinput63, po10);

#locking next scan-cell in scan-chain
po11$enc = xor(keyinput53, po11$enc_11);
po11$enc_11 = xor(keyinput54, po11$enc_10);
po11$enc_10 = xor(keyinput55, po11$enc_9);
po11$enc_9 = xor(keyinput56, po11$enc_8);
po11$enc_8 = xor(keyinput57, po11$enc_7);
po11$enc_7 = xor(keyinput58, po11$enc_6);
po11$enc_6 = xor(keyinput59, po11$enc_5);
po11$enc_5 = xor(keyinput60, po11$enc_4);
po11$enc_4 = xor(keyinput61, po11$enc_3);
po11$enc_3 = xor(keyinput62, po11$enc_2);
po11$enc_2 = xor(keyinput63, po11$enc_1);
po11$enc_1 = xor(keyinput64, po11);

#locking next scan-cell in scan-chain
po12$enc = xor(keyinput53, po12$enc_12);
po12$enc_12 = xor(keyinput54, po12$enc_11);
po12$enc_11 = xor(keyinput55, po12$enc_10);
po12$enc_10 = xor(keyinput56, po12$enc_9);
po12$enc_9 = xor(keyinput57, po12$enc_8);
po12$enc_8 = xor(keyinput58, po12$enc_7);
po12$enc_7 = xor(keyinput59, po12$enc_6);
po12$enc_6 = xor(keyinput60, po12$enc_5);
po12$enc_5 = xor(keyinput61, po12$enc_4);
po12$enc_4 = xor(keyinput62, po12$enc_3);
po12$enc_3 = xor(keyinput63, po12$enc_2);
po12$enc_2 = xor(keyinput64, po12$enc_1);
po12$enc_1 = xor(keyinput65, po12);

#locking next scan-cell in scan-chain
po13$enc = xor(keyinput53, po13$enc_13);
po13$enc_13 = xor(keyinput54, po13$enc_12);
po13$enc_12 = xor(keyinput55, po13$enc_11);
po13$enc_11 = xor(keyinput56, po13$enc_10);
po13$enc_10 = xor(keyinput57, po13$enc_9);
po13$enc_9 = xor(keyinput58, po13$enc_8);
po13$enc_8 = xor(keyinput59, po13$enc_7);
po13$enc_7 = xor(keyinput60, po13$enc_6);
po13$enc_6 = xor(keyinput61, po13$enc_5);
po13$enc_5 = xor(keyinput62, po13$enc_4);
po13$enc_4 = xor(keyinput63, po13$enc_3);
po13$enc_3 = xor(keyinput64, po13$enc_2);
po13$enc_2 = xor(keyinput65, po13$enc_1);
po13$enc_1 = xor(keyinput66, po13);

#locking next scan-cell in scan-chain
po14$enc = xor(keyinput53, po14$enc_14);
po14$enc_14 = xor(keyinput54, po14$enc_13);
po14$enc_13 = xor(keyinput55, po14$enc_12);
po14$enc_12 = xor(keyinput56, po14$enc_11);
po14$enc_11 = xor(keyinput57, po14$enc_10);
po14$enc_10 = xor(keyinput58, po14$enc_9);
po14$enc_9 = xor(keyinput59, po14$enc_8);
po14$enc_8 = xor(keyinput60, po14$enc_7);
po14$enc_7 = xor(keyinput61, po14$enc_6);
po14$enc_6 = xor(keyinput62, po14$enc_5);
po14$enc_5 = xor(keyinput63, po14$enc_4);
po14$enc_4 = xor(keyinput64, po14$enc_3);
po14$enc_3 = xor(keyinput65, po14$enc_2);
po14$enc_2 = xor(keyinput66, po14$enc_1);
po14$enc_1 = xor(keyinput67, po14);

#locking next scan-cell in scan-chain
po15$enc = xor(keyinput53, po15$enc_15);
po15$enc_15 = xor(keyinput54, po15$enc_14);
po15$enc_14 = xor(keyinput55, po15$enc_13);
po15$enc_13 = xor(keyinput56, po15$enc_12);
po15$enc_12 = xor(keyinput57, po15$enc_11);
po15$enc_11 = xor(keyinput58, po15$enc_10);
po15$enc_10 = xor(keyinput59, po15$enc_9);
po15$enc_9 = xor(keyinput60, po15$enc_8);
po15$enc_8 = xor(keyinput61, po15$enc_7);
po15$enc_7 = xor(keyinput62, po15$enc_6);
po15$enc_6 = xor(keyinput63, po15$enc_5);
po15$enc_5 = xor(keyinput64, po15$enc_4);
po15$enc_4 = xor(keyinput65, po15$enc_3);
po15$enc_3 = xor(keyinput66, po15$enc_2);
po15$enc_2 = xor(keyinput67, po15$enc_1);
po15$enc_1 = xor(keyinput68, po15);

#locking next scan-cell in scan-chain
po16$enc = xor(keyinput53, po16$enc_16);
po16$enc_16 = xor(keyinput54, po16$enc_15);
po16$enc_15 = xor(keyinput55, po16$enc_14);
po16$enc_14 = xor(keyinput56, po16$enc_13);
po16$enc_13 = xor(keyinput57, po16$enc_12);
po16$enc_12 = xor(keyinput58, po16$enc_11);
po16$enc_11 = xor(keyinput59, po16$enc_10);
po16$enc_10 = xor(keyinput60, po16$enc_9);
po16$enc_9 = xor(keyinput61, po16$enc_8);
po16$enc_8 = xor(keyinput62, po16$enc_7);
po16$enc_7 = xor(keyinput63, po16$enc_6);
po16$enc_6 = xor(keyinput64, po16$enc_5);
po16$enc_5 = xor(keyinput65, po16$enc_4);
po16$enc_4 = xor(keyinput66, po16$enc_3);
po16$enc_3 = xor(keyinput67, po16$enc_2);
po16$enc_2 = xor(keyinput68, po16$enc_1);
po16$enc_1 = xor(keyinput69, po16);

#locking next scan-cell in scan-chain
po17$enc = xor(keyinput53, po17$enc_17);
po17$enc_17 = xor(keyinput54, po17$enc_16);
po17$enc_16 = xor(keyinput55, po17$enc_15);
po17$enc_15 = xor(keyinput56, po17$enc_14);
po17$enc_14 = xor(keyinput57, po17$enc_13);
po17$enc_13 = xor(keyinput58, po17$enc_12);
po17$enc_12 = xor(keyinput59, po17$enc_11);
po17$enc_11 = xor(keyinput60, po17$enc_10);
po17$enc_10 = xor(keyinput61, po17$enc_9);
po17$enc_9 = xor(keyinput62, po17$enc_8);
po17$enc_8 = xor(keyinput63, po17$enc_7);
po17$enc_7 = xor(keyinput64, po17$enc_6);
po17$enc_6 = xor(keyinput65, po17$enc_5);
po17$enc_5 = xor(keyinput66, po17$enc_4);
po17$enc_4 = xor(keyinput67, po17$enc_3);
po17$enc_3 = xor(keyinput68, po17$enc_2);
po17$enc_2 = xor(keyinput69, po17$enc_1);
po17$enc_1 = xor(keyinput70, po17);

#locking next scan-cell in scan-chain
po18$enc = xor(keyinput53, po18$enc_18);
po18$enc_18 = xor(keyinput54, po18$enc_17);
po18$enc_17 = xor(keyinput55, po18$enc_16);
po18$enc_16 = xor(keyinput56, po18$enc_15);
po18$enc_15 = xor(keyinput57, po18$enc_14);
po18$enc_14 = xor(keyinput58, po18$enc_13);
po18$enc_13 = xor(keyinput59, po18$enc_12);
po18$enc_12 = xor(keyinput60, po18$enc_11);
po18$enc_11 = xor(keyinput61, po18$enc_10);
po18$enc_10 = xor(keyinput62, po18$enc_9);
po18$enc_9 = xor(keyinput63, po18$enc_8);
po18$enc_8 = xor(keyinput64, po18$enc_7);
po18$enc_7 = xor(keyinput65, po18$enc_6);
po18$enc_6 = xor(keyinput66, po18$enc_5);
po18$enc_5 = xor(keyinput67, po18$enc_4);
po18$enc_4 = xor(keyinput68, po18$enc_3);
po18$enc_3 = xor(keyinput69, po18$enc_2);
po18$enc_2 = xor(keyinput70, po18$enc_1);
po18$enc_1 = xor(keyinput71, po18enc);

#locking next scan-cell in scan-chain
po19$enc = xor(keyinput53, po19$enc_19);
po19$enc_19 = xor(keyinput54, po19$enc_18);
po19$enc_18 = xor(keyinput55, po19$enc_17);
po19$enc_17 = xor(keyinput56, po19$enc_16);
po19$enc_16 = xor(keyinput57, po19$enc_15);
po19$enc_15 = xor(keyinput58, po19$enc_14);
po19$enc_14 = xor(keyinput59, po19$enc_13);
po19$enc_13 = xor(keyinput60, po19$enc_12);
po19$enc_12 = xor(keyinput61, po19$enc_11);
po19$enc_11 = xor(keyinput62, po19$enc_10);
po19$enc_10 = xor(keyinput63, po19$enc_9);
po19$enc_9 = xor(keyinput64, po19$enc_8);
po19$enc_8 = xor(keyinput65, po19$enc_7);
po19$enc_7 = xor(keyinput66, po19$enc_6);
po19$enc_6 = xor(keyinput67, po19$enc_5);
po19$enc_5 = xor(keyinput68, po19$enc_4);
po19$enc_4 = xor(keyinput69, po19$enc_3);
po19$enc_3 = xor(keyinput70, po19$enc_2);
po19$enc_2 = xor(keyinput71, po19$enc_1);
po19$enc_1 = xor(keyinput72, po19);

#locking next scan-cell in scan-chain
po20$enc = xor(keyinput53, po20$enc_20);
po20$enc_20 = xor(keyinput54, po20$enc_19);
po20$enc_19 = xor(keyinput55, po20$enc_18);
po20$enc_18 = xor(keyinput56, po20$enc_17);
po20$enc_17 = xor(keyinput57, po20$enc_16);
po20$enc_16 = xor(keyinput58, po20$enc_15);
po20$enc_15 = xor(keyinput59, po20$enc_14);
po20$enc_14 = xor(keyinput60, po20$enc_13);
po20$enc_13 = xor(keyinput61, po20$enc_12);
po20$enc_12 = xor(keyinput62, po20$enc_11);
po20$enc_11 = xor(keyinput63, po20$enc_10);
po20$enc_10 = xor(keyinput64, po20$enc_9);
po20$enc_9 = xor(keyinput65, po20$enc_8);
po20$enc_8 = xor(keyinput66, po20$enc_7);
po20$enc_7 = xor(keyinput67, po20$enc_6);
po20$enc_6 = xor(keyinput68, po20$enc_5);
po20$enc_5 = xor(keyinput69, po20$enc_4);
po20$enc_4 = xor(keyinput70, po20$enc_3);
po20$enc_3 = xor(keyinput71, po20$enc_2);
po20$enc_2 = xor(keyinput72, po20$enc_1);
po20$enc_1 = xor(keyinput73, po20);

#locking next scan-cell in scan-chain
po21$enc = xor(keyinput53, po21$enc_21);
po21$enc_21 = xor(keyinput54, po21$enc_20);
po21$enc_20 = xor(keyinput55, po21$enc_19);
po21$enc_19 = xor(keyinput56, po21$enc_18);
po21$enc_18 = xor(keyinput57, po21$enc_17);
po21$enc_17 = xor(keyinput58, po21$enc_16);
po21$enc_16 = xor(keyinput59, po21$enc_15);
po21$enc_15 = xor(keyinput60, po21$enc_14);
po21$enc_14 = xor(keyinput61, po21$enc_13);
po21$enc_13 = xor(keyinput62, po21$enc_12);
po21$enc_12 = xor(keyinput63, po21$enc_11);
po21$enc_11 = xor(keyinput64, po21$enc_10);
po21$enc_10 = xor(keyinput65, po21$enc_9);
po21$enc_9 = xor(keyinput66, po21$enc_8);
po21$enc_8 = xor(keyinput67, po21$enc_7);
po21$enc_7 = xor(keyinput68, po21$enc_6);
po21$enc_6 = xor(keyinput69, po21$enc_5);
po21$enc_5 = xor(keyinput70, po21$enc_4);
po21$enc_4 = xor(keyinput71, po21$enc_3);
po21$enc_3 = xor(keyinput72, po21$enc_2);
po21$enc_2 = xor(keyinput73, po21$enc_1);
po21$enc_1 = xor(keyinput74, po21);

#locking next scan-cell in scan-chain
po22$enc = xor(keyinput53, po22$enc_22);
po22$enc_22 = xor(keyinput54, po22$enc_21);
po22$enc_21 = xor(keyinput55, po22$enc_20);
po22$enc_20 = xor(keyinput56, po22$enc_19);
po22$enc_19 = xor(keyinput57, po22$enc_18);
po22$enc_18 = xor(keyinput58, po22$enc_17);
po22$enc_17 = xor(keyinput59, po22$enc_16);
po22$enc_16 = xor(keyinput60, po22$enc_15);
po22$enc_15 = xor(keyinput61, po22$enc_14);
po22$enc_14 = xor(keyinput62, po22$enc_13);
po22$enc_13 = xor(keyinput63, po22$enc_12);
po22$enc_12 = xor(keyinput64, po22$enc_11);
po22$enc_11 = xor(keyinput65, po22$enc_10);
po22$enc_10 = xor(keyinput66, po22$enc_9);
po22$enc_9 = xor(keyinput67, po22$enc_8);
po22$enc_8 = xor(keyinput68, po22$enc_7);
po22$enc_7 = xor(keyinput69, po22$enc_6);
po22$enc_6 = xor(keyinput70, po22$enc_5);
po22$enc_5 = xor(keyinput71, po22$enc_4);
po22$enc_4 = xor(keyinput72, po22$enc_3);
po22$enc_3 = xor(keyinput73, po22$enc_2);
po22$enc_2 = xor(keyinput74, po22$enc_1);
po22$enc_1 = xor(keyinput75, po22);

#locking next scan-cell in scan-chain
po23$enc = xor(keyinput53, po23$enc_23);
po23$enc_23 = xor(keyinput54, po23$enc_22);
po23$enc_22 = xor(keyinput55, po23$enc_21);
po23$enc_21 = xor(keyinput56, po23$enc_20);
po23$enc_20 = xor(keyinput57, po23$enc_19);
po23$enc_19 = xor(keyinput58, po23$enc_18);
po23$enc_18 = xor(keyinput59, po23$enc_17);
po23$enc_17 = xor(keyinput60, po23$enc_16);
po23$enc_16 = xor(keyinput61, po23$enc_15);
po23$enc_15 = xor(keyinput62, po23$enc_14);
po23$enc_14 = xor(keyinput63, po23$enc_13);
po23$enc_13 = xor(keyinput64, po23$enc_12);
po23$enc_12 = xor(keyinput65, po23$enc_11);
po23$enc_11 = xor(keyinput66, po23$enc_10);
po23$enc_10 = xor(keyinput67, po23$enc_9);
po23$enc_9 = xor(keyinput68, po23$enc_8);
po23$enc_8 = xor(keyinput69, po23$enc_7);
po23$enc_7 = xor(keyinput70, po23$enc_6);
po23$enc_6 = xor(keyinput71, po23$enc_5);
po23$enc_5 = xor(keyinput72, po23$enc_4);
po23$enc_4 = xor(keyinput73, po23$enc_3);
po23$enc_3 = xor(keyinput74, po23$enc_2);
po23$enc_2 = xor(keyinput75, po23$enc_1);
po23$enc_1 = xor(keyinput76, po23);

#locking next scan-cell in scan-chain
po24$enc = xor(keyinput53, po24$enc_24);
po24$enc_24 = xor(keyinput54, po24$enc_23);
po24$enc_23 = xor(keyinput55, po24$enc_22);
po24$enc_22 = xor(keyinput56, po24$enc_21);
po24$enc_21 = xor(keyinput57, po24$enc_20);
po24$enc_20 = xor(keyinput58, po24$enc_19);
po24$enc_19 = xor(keyinput59, po24$enc_18);
po24$enc_18 = xor(keyinput60, po24$enc_17);
po24$enc_17 = xor(keyinput61, po24$enc_16);
po24$enc_16 = xor(keyinput62, po24$enc_15);
po24$enc_15 = xor(keyinput63, po24$enc_14);
po24$enc_14 = xor(keyinput64, po24$enc_13);
po24$enc_13 = xor(keyinput65, po24$enc_12);
po24$enc_12 = xor(keyinput66, po24$enc_11);
po24$enc_11 = xor(keyinput67, po24$enc_10);
po24$enc_10 = xor(keyinput68, po24$enc_9);
po24$enc_9 = xor(keyinput69, po24$enc_8);
po24$enc_8 = xor(keyinput70, po24$enc_7);
po24$enc_7 = xor(keyinput71, po24$enc_6);
po24$enc_6 = xor(keyinput72, po24$enc_5);
po24$enc_5 = xor(keyinput73, po24$enc_4);
po24$enc_4 = xor(keyinput74, po24$enc_3);
po24$enc_3 = xor(keyinput75, po24$enc_2);
po24$enc_2 = xor(keyinput76, po24$enc_1);
po24$enc_1 = xor(keyinput77, po24);

#locking next scan-cell in scan-chain
po25$enc = xor(keyinput53, po25$enc_25);
po25$enc_25 = xor(keyinput54, po25$enc_24);
po25$enc_24 = xor(keyinput55, po25$enc_23);
po25$enc_23 = xor(keyinput56, po25$enc_22);
po25$enc_22 = xor(keyinput57, po25$enc_21);
po25$enc_21 = xor(keyinput58, po25$enc_20);
po25$enc_20 = xor(keyinput59, po25$enc_19);
po25$enc_19 = xor(keyinput60, po25$enc_18);
po25$enc_18 = xor(keyinput61, po25$enc_17);
po25$enc_17 = xor(keyinput62, po25$enc_16);
po25$enc_16 = xor(keyinput63, po25$enc_15);
po25$enc_15 = xor(keyinput64, po25$enc_14);
po25$enc_14 = xor(keyinput65, po25$enc_13);
po25$enc_13 = xor(keyinput66, po25$enc_12);
po25$enc_12 = xor(keyinput67, po25$enc_11);
po25$enc_11 = xor(keyinput68, po25$enc_10);
po25$enc_10 = xor(keyinput69, po25$enc_9);
po25$enc_9 = xor(keyinput70, po25$enc_8);
po25$enc_8 = xor(keyinput71, po25$enc_7);
po25$enc_7 = xor(keyinput72, po25$enc_6);
po25$enc_6 = xor(keyinput73, po25$enc_5);
po25$enc_5 = xor(keyinput74, po25$enc_4);
po25$enc_4 = xor(keyinput75, po25$enc_3);
po25$enc_3 = xor(keyinput76, po25$enc_2);
po25$enc_2 = xor(keyinput77, po25$enc_1);
po25$enc_1 = xor(keyinput78, po25);

#locking next scan-cell in scan-chain
po26$enc = xor(keyinput53, po26$enc_26);
po26$enc_26 = xor(keyinput54, po26$enc_25);
po26$enc_25 = xor(keyinput55, po26$enc_24);
po26$enc_24 = xor(keyinput56, po26$enc_23);
po26$enc_23 = xor(keyinput57, po26$enc_22);
po26$enc_22 = xor(keyinput58, po26$enc_21);
po26$enc_21 = xor(keyinput59, po26$enc_20);
po26$enc_20 = xor(keyinput60, po26$enc_19);
po26$enc_19 = xor(keyinput61, po26$enc_18);
po26$enc_18 = xor(keyinput62, po26$enc_17);
po26$enc_17 = xor(keyinput63, po26$enc_16);
po26$enc_16 = xor(keyinput64, po26$enc_15);
po26$enc_15 = xor(keyinput65, po26$enc_14);
po26$enc_14 = xor(keyinput66, po26$enc_13);
po26$enc_13 = xor(keyinput67, po26$enc_12);
po26$enc_12 = xor(keyinput68, po26$enc_11);
po26$enc_11 = xor(keyinput69, po26$enc_10);
po26$enc_10 = xor(keyinput70, po26$enc_9);
po26$enc_9 = xor(keyinput71, po26$enc_8);
po26$enc_8 = xor(keyinput72, po26$enc_7);
po26$enc_7 = xor(keyinput73, po26$enc_6);
po26$enc_6 = xor(keyinput74, po26$enc_5);
po26$enc_5 = xor(keyinput75, po26$enc_4);
po26$enc_4 = xor(keyinput76, po26$enc_3);
po26$enc_3 = xor(keyinput77, po26$enc_2);
po26$enc_2 = xor(keyinput78, po26$enc_1);
po26$enc_1 = xor(keyinput79, po26);

#locking next scan-cell in scan-chain
po27$enc = xor(keyinput53, po27$enc_27);
po27$enc_27 = xor(keyinput54, po27$enc_26);
po27$enc_26 = xor(keyinput55, po27$enc_25);
po27$enc_25 = xor(keyinput56, po27$enc_24);
po27$enc_24 = xor(keyinput57, po27$enc_23);
po27$enc_23 = xor(keyinput58, po27$enc_22);
po27$enc_22 = xor(keyinput59, po27$enc_21);
po27$enc_21 = xor(keyinput60, po27$enc_20);
po27$enc_20 = xor(keyinput61, po27$enc_19);
po27$enc_19 = xor(keyinput62, po27$enc_18);
po27$enc_18 = xor(keyinput63, po27$enc_17);
po27$enc_17 = xor(keyinput64, po27$enc_16);
po27$enc_16 = xor(keyinput65, po27$enc_15);
po27$enc_15 = xor(keyinput66, po27$enc_14);
po27$enc_14 = xor(keyinput67, po27$enc_13);
po27$enc_13 = xor(keyinput68, po27$enc_12);
po27$enc_12 = xor(keyinput69, po27$enc_11);
po27$enc_11 = xor(keyinput70, po27$enc_10);
po27$enc_10 = xor(keyinput71, po27$enc_9);
po27$enc_9 = xor(keyinput72, po27$enc_8);
po27$enc_8 = xor(keyinput73, po27$enc_7);
po27$enc_7 = xor(keyinput74, po27$enc_6);
po27$enc_6 = xor(keyinput75, po27$enc_5);
po27$enc_5 = xor(keyinput76, po27$enc_4);
po27$enc_4 = xor(keyinput77, po27$enc_3);
po27$enc_3 = xor(keyinput78, po27$enc_2);
po27$enc_2 = xor(keyinput79, po27$enc_1);
po27$enc_1 = xor(keyinput80, po27);

#locking next scan-cell in scan-chain
po28$enc = xor(keyinput53, po28$enc_28);
po28$enc_28 = xor(keyinput54, po28$enc_27);
po28$enc_27 = xor(keyinput55, po28$enc_26);
po28$enc_26 = xor(keyinput56, po28$enc_25);
po28$enc_25 = xor(keyinput57, po28$enc_24);
po28$enc_24 = xor(keyinput58, po28$enc_23);
po28$enc_23 = xor(keyinput59, po28$enc_22);
po28$enc_22 = xor(keyinput60, po28$enc_21);
po28$enc_21 = xor(keyinput61, po28$enc_20);
po28$enc_20 = xor(keyinput62, po28$enc_19);
po28$enc_19 = xor(keyinput63, po28$enc_18);
po28$enc_18 = xor(keyinput64, po28$enc_17);
po28$enc_17 = xor(keyinput65, po28$enc_16);
po28$enc_16 = xor(keyinput66, po28$enc_15);
po28$enc_15 = xor(keyinput67, po28$enc_14);
po28$enc_14 = xor(keyinput68, po28$enc_13);
po28$enc_13 = xor(keyinput69, po28$enc_12);
po28$enc_12 = xor(keyinput70, po28$enc_11);
po28$enc_11 = xor(keyinput71, po28$enc_10);
po28$enc_10 = xor(keyinput72, po28$enc_9);
po28$enc_9 = xor(keyinput73, po28$enc_8);
po28$enc_8 = xor(keyinput74, po28$enc_7);
po28$enc_7 = xor(keyinput75, po28$enc_6);
po28$enc_6 = xor(keyinput76, po28$enc_5);
po28$enc_5 = xor(keyinput77, po28$enc_4);
po28$enc_4 = xor(keyinput78, po28$enc_3);
po28$enc_3 = xor(keyinput79, po28$enc_2);
po28$enc_2 = xor(keyinput80, po28$enc_1);
po28$enc_1 = xor(keyinput81, po28);

#locking next scan-cell in scan-chain
po29$enc = xor(keyinput53, po29$enc_29);
po29$enc_29 = xor(keyinput54, po29$enc_28);
po29$enc_28 = xor(keyinput55, po29$enc_27);
po29$enc_27 = xor(keyinput56, po29$enc_26);
po29$enc_26 = xor(keyinput57, po29$enc_25);
po29$enc_25 = xor(keyinput58, po29$enc_24);
po29$enc_24 = xor(keyinput59, po29$enc_23);
po29$enc_23 = xor(keyinput60, po29$enc_22);
po29$enc_22 = xor(keyinput61, po29$enc_21);
po29$enc_21 = xor(keyinput62, po29$enc_20);
po29$enc_20 = xor(keyinput63, po29$enc_19);
po29$enc_19 = xor(keyinput64, po29$enc_18);
po29$enc_18 = xor(keyinput65, po29$enc_17);
po29$enc_17 = xor(keyinput66, po29$enc_16);
po29$enc_16 = xor(keyinput67, po29$enc_15);
po29$enc_15 = xor(keyinput68, po29$enc_14);
po29$enc_14 = xor(keyinput69, po29$enc_13);
po29$enc_13 = xor(keyinput70, po29$enc_12);
po29$enc_12 = xor(keyinput71, po29$enc_11);
po29$enc_11 = xor(keyinput72, po29$enc_10);
po29$enc_10 = xor(keyinput73, po29$enc_9);
po29$enc_9 = xor(keyinput74, po29$enc_8);
po29$enc_8 = xor(keyinput75, po29$enc_7);
po29$enc_7 = xor(keyinput76, po29$enc_6);
po29$enc_6 = xor(keyinput77, po29$enc_5);
po29$enc_5 = xor(keyinput78, po29$enc_4);
po29$enc_4 = xor(keyinput79, po29$enc_3);
po29$enc_3 = xor(keyinput80, po29$enc_2);
po29$enc_2 = xor(keyinput81, po29$enc_1);
po29$enc_1 = xor(keyinput82, po29);

#locking next scan-cell in scan-chain
po30$enc = xor(keyinput53, po30$enc_30);
po30$enc_30 = xor(keyinput54, po30$enc_29);
po30$enc_29 = xor(keyinput55, po30$enc_28);
po30$enc_28 = xor(keyinput56, po30$enc_27);
po30$enc_27 = xor(keyinput57, po30$enc_26);
po30$enc_26 = xor(keyinput58, po30$enc_25);
po30$enc_25 = xor(keyinput59, po30$enc_24);
po30$enc_24 = xor(keyinput60, po30$enc_23);
po30$enc_23 = xor(keyinput61, po30$enc_22);
po30$enc_22 = xor(keyinput62, po30$enc_21);
po30$enc_21 = xor(keyinput63, po30$enc_20);
po30$enc_20 = xor(keyinput64, po30$enc_19);
po30$enc_19 = xor(keyinput65, po30$enc_18);
po30$enc_18 = xor(keyinput66, po30$enc_17);
po30$enc_17 = xor(keyinput67, po30$enc_16);
po30$enc_16 = xor(keyinput68, po30$enc_15);
po30$enc_15 = xor(keyinput69, po30$enc_14);
po30$enc_14 = xor(keyinput70, po30$enc_13);
po30$enc_13 = xor(keyinput71, po30$enc_12);
po30$enc_12 = xor(keyinput72, po30$enc_11);
po30$enc_11 = xor(keyinput73, po30$enc_10);
po30$enc_10 = xor(keyinput74, po30$enc_9);
po30$enc_9 = xor(keyinput75, po30$enc_8);
po30$enc_8 = xor(keyinput76, po30$enc_7);
po30$enc_7 = xor(keyinput77, po30$enc_6);
po30$enc_6 = xor(keyinput78, po30$enc_5);
po30$enc_5 = xor(keyinput79, po30$enc_4);
po30$enc_4 = xor(keyinput80, po30$enc_3);
po30$enc_3 = xor(keyinput81, po30$enc_2);
po30$enc_2 = xor(keyinput82, po30$enc_1);
po30$enc_1 = xor(keyinput83, po30);

#locking next scan-cell in scan-chain
po31$enc = xor(keyinput53, po31$enc_31);
po31$enc_31 = xor(keyinput54, po31$enc_30);
po31$enc_30 = xor(keyinput55, po31$enc_29);
po31$enc_29 = xor(keyinput56, po31$enc_28);
po31$enc_28 = xor(keyinput57, po31$enc_27);
po31$enc_27 = xor(keyinput58, po31$enc_26);
po31$enc_26 = xor(keyinput59, po31$enc_25);
po31$enc_25 = xor(keyinput60, po31$enc_24);
po31$enc_24 = xor(keyinput61, po31$enc_23);
po31$enc_23 = xor(keyinput62, po31$enc_22);
po31$enc_22 = xor(keyinput63, po31$enc_21);
po31$enc_21 = xor(keyinput64, po31$enc_20);
po31$enc_20 = xor(keyinput65, po31$enc_19);
po31$enc_19 = xor(keyinput66, po31$enc_18);
po31$enc_18 = xor(keyinput67, po31$enc_17);
po31$enc_17 = xor(keyinput68, po31$enc_16);
po31$enc_16 = xor(keyinput69, po31$enc_15);
po31$enc_15 = xor(keyinput70, po31$enc_14);
po31$enc_14 = xor(keyinput71, po31$enc_13);
po31$enc_13 = xor(keyinput72, po31$enc_12);
po31$enc_12 = xor(keyinput73, po31$enc_11);
po31$enc_11 = xor(keyinput74, po31$enc_10);
po31$enc_10 = xor(keyinput75, po31$enc_9);
po31$enc_9 = xor(keyinput76, po31$enc_8);
po31$enc_8 = xor(keyinput77, po31$enc_7);
po31$enc_7 = xor(keyinput78, po31$enc_6);
po31$enc_6 = xor(keyinput79, po31$enc_5);
po31$enc_5 = xor(keyinput80, po31$enc_4);
po31$enc_4 = xor(keyinput81, po31$enc_3);
po31$enc_3 = xor(keyinput82, po31$enc_2);
po31$enc_2 = xor(keyinput83, po31$enc_1);
po31$enc_1 = xor(keyinput84, po31);

#locking next scan-cell in scan-chain
po32$enc = xor(keyinput53, po32$enc_32);
po32$enc_32 = xor(keyinput54, po32$enc_31);
po32$enc_31 = xor(keyinput55, po32$enc_30);
po32$enc_30 = xor(keyinput56, po32$enc_29);
po32$enc_29 = xor(keyinput57, po32$enc_28);
po32$enc_28 = xor(keyinput58, po32$enc_27);
po32$enc_27 = xor(keyinput59, po32$enc_26);
po32$enc_26 = xor(keyinput60, po32$enc_25);
po32$enc_25 = xor(keyinput61, po32$enc_24);
po32$enc_24 = xor(keyinput62, po32$enc_23);
po32$enc_23 = xor(keyinput63, po32$enc_22);
po32$enc_22 = xor(keyinput64, po32$enc_21);
po32$enc_21 = xor(keyinput65, po32$enc_20);
po32$enc_20 = xor(keyinput66, po32$enc_19);
po32$enc_19 = xor(keyinput67, po32$enc_18);
po32$enc_18 = xor(keyinput68, po32$enc_17);
po32$enc_17 = xor(keyinput69, po32$enc_16);
po32$enc_16 = xor(keyinput70, po32$enc_15);
po32$enc_15 = xor(keyinput71, po32$enc_14);
po32$enc_14 = xor(keyinput72, po32$enc_13);
po32$enc_13 = xor(keyinput73, po32$enc_12);
po32$enc_12 = xor(keyinput74, po32$enc_11);
po32$enc_11 = xor(keyinput75, po32$enc_10);
po32$enc_10 = xor(keyinput76, po32$enc_9);
po32$enc_9 = xor(keyinput77, po32$enc_8);
po32$enc_8 = xor(keyinput78, po32$enc_7);
po32$enc_7 = xor(keyinput79, po32$enc_6);
po32$enc_6 = xor(keyinput80, po32$enc_5);
po32$enc_5 = xor(keyinput81, po32$enc_4);
po32$enc_4 = xor(keyinput82, po32$enc_3);
po32$enc_3 = xor(keyinput83, po32$enc_2);
po32$enc_2 = xor(keyinput84, po32$enc_1);
po32$enc_1 = xor(keyinput85, po32);

#locking next scan-cell in scan-chain
po33$enc = xor(keyinput53, po33$enc_33);
po33$enc_33 = xor(keyinput54, po33$enc_32);
po33$enc_32 = xor(keyinput55, po33$enc_31);
po33$enc_31 = xor(keyinput56, po33$enc_30);
po33$enc_30 = xor(keyinput57, po33$enc_29);
po33$enc_29 = xor(keyinput58, po33$enc_28);
po33$enc_28 = xor(keyinput59, po33$enc_27);
po33$enc_27 = xor(keyinput60, po33$enc_26);
po33$enc_26 = xor(keyinput61, po33$enc_25);
po33$enc_25 = xor(keyinput62, po33$enc_24);
po33$enc_24 = xor(keyinput63, po33$enc_23);
po33$enc_23 = xor(keyinput64, po33$enc_22);
po33$enc_22 = xor(keyinput65, po33$enc_21);
po33$enc_21 = xor(keyinput66, po33$enc_20);
po33$enc_20 = xor(keyinput67, po33$enc_19);
po33$enc_19 = xor(keyinput68, po33$enc_18);
po33$enc_18 = xor(keyinput69, po33$enc_17);
po33$enc_17 = xor(keyinput70, po33$enc_16);
po33$enc_16 = xor(keyinput71, po33$enc_15);
po33$enc_15 = xor(keyinput72, po33$enc_14);
po33$enc_14 = xor(keyinput73, po33$enc_13);
po33$enc_13 = xor(keyinput74, po33$enc_12);
po33$enc_12 = xor(keyinput75, po33$enc_11);
po33$enc_11 = xor(keyinput76, po33$enc_10);
po33$enc_10 = xor(keyinput77, po33$enc_9);
po33$enc_9 = xor(keyinput78, po33$enc_8);
po33$enc_8 = xor(keyinput79, po33$enc_7);
po33$enc_7 = xor(keyinput80, po33$enc_6);
po33$enc_6 = xor(keyinput81, po33$enc_5);
po33$enc_5 = xor(keyinput82, po33$enc_4);
po33$enc_4 = xor(keyinput83, po33$enc_3);
po33$enc_3 = xor(keyinput84, po33$enc_2);
po33$enc_2 = xor(keyinput85, po33$enc_1);
po33$enc_1 = xor(keyinput86, po33);

#locking next scan-cell in scan-chain
po34$enc = xor(keyinput53, po34$enc_34);
po34$enc_34 = xor(keyinput54, po34$enc_33);
po34$enc_33 = xor(keyinput55, po34$enc_32);
po34$enc_32 = xor(keyinput56, po34$enc_31);
po34$enc_31 = xor(keyinput57, po34$enc_30);
po34$enc_30 = xor(keyinput58, po34$enc_29);
po34$enc_29 = xor(keyinput59, po34$enc_28);
po34$enc_28 = xor(keyinput60, po34$enc_27);
po34$enc_27 = xor(keyinput61, po34$enc_26);
po34$enc_26 = xor(keyinput62, po34$enc_25);
po34$enc_25 = xor(keyinput63, po34$enc_24);
po34$enc_24 = xor(keyinput64, po34$enc_23);
po34$enc_23 = xor(keyinput65, po34$enc_22);
po34$enc_22 = xor(keyinput66, po34$enc_21);
po34$enc_21 = xor(keyinput67, po34$enc_20);
po34$enc_20 = xor(keyinput68, po34$enc_19);
po34$enc_19 = xor(keyinput69, po34$enc_18);
po34$enc_18 = xor(keyinput70, po34$enc_17);
po34$enc_17 = xor(keyinput71, po34$enc_16);
po34$enc_16 = xor(keyinput72, po34$enc_15);
po34$enc_15 = xor(keyinput73, po34$enc_14);
po34$enc_14 = xor(keyinput74, po34$enc_13);
po34$enc_13 = xor(keyinput75, po34$enc_12);
po34$enc_12 = xor(keyinput76, po34$enc_11);
po34$enc_11 = xor(keyinput77, po34$enc_10);
po34$enc_10 = xor(keyinput78, po34$enc_9);
po34$enc_9 = xor(keyinput79, po34$enc_8);
po34$enc_8 = xor(keyinput80, po34$enc_7);
po34$enc_7 = xor(keyinput81, po34$enc_6);
po34$enc_6 = xor(keyinput82, po34$enc_5);
po34$enc_5 = xor(keyinput83, po34$enc_4);
po34$enc_4 = xor(keyinput84, po34$enc_3);
po34$enc_3 = xor(keyinput85, po34$enc_2);
po34$enc_2 = xor(keyinput86, po34$enc_1);
po34$enc_1 = xor(keyinput87, po34);

#locking next scan-cell in scan-chain
po35$enc = xor(keyinput53, po35$enc_35);
po35$enc_35 = xor(keyinput54, po35$enc_34);
po35$enc_34 = xor(keyinput55, po35$enc_33);
po35$enc_33 = xor(keyinput56, po35$enc_32);
po35$enc_32 = xor(keyinput57, po35$enc_31);
po35$enc_31 = xor(keyinput58, po35$enc_30);
po35$enc_30 = xor(keyinput59, po35$enc_29);
po35$enc_29 = xor(keyinput60, po35$enc_28);
po35$enc_28 = xor(keyinput61, po35$enc_27);
po35$enc_27 = xor(keyinput62, po35$enc_26);
po35$enc_26 = xor(keyinput63, po35$enc_25);
po35$enc_25 = xor(keyinput64, po35$enc_24);
po35$enc_24 = xor(keyinput65, po35$enc_23);
po35$enc_23 = xor(keyinput66, po35$enc_22);
po35$enc_22 = xor(keyinput67, po35$enc_21);
po35$enc_21 = xor(keyinput68, po35$enc_20);
po35$enc_20 = xor(keyinput69, po35$enc_19);
po35$enc_19 = xor(keyinput70, po35$enc_18);
po35$enc_18 = xor(keyinput71, po35$enc_17);
po35$enc_17 = xor(keyinput72, po35$enc_16);
po35$enc_16 = xor(keyinput73, po35$enc_15);
po35$enc_15 = xor(keyinput74, po35$enc_14);
po35$enc_14 = xor(keyinput75, po35$enc_13);
po35$enc_13 = xor(keyinput76, po35$enc_12);
po35$enc_12 = xor(keyinput77, po35$enc_11);
po35$enc_11 = xor(keyinput78, po35$enc_10);
po35$enc_10 = xor(keyinput79, po35$enc_9);
po35$enc_9 = xor(keyinput80, po35$enc_8);
po35$enc_8 = xor(keyinput81, po35$enc_7);
po35$enc_7 = xor(keyinput82, po35$enc_6);
po35$enc_6 = xor(keyinput83, po35$enc_5);
po35$enc_5 = xor(keyinput84, po35$enc_4);
po35$enc_4 = xor(keyinput85, po35$enc_3);
po35$enc_3 = xor(keyinput86, po35$enc_2);
po35$enc_2 = xor(keyinput87, po35$enc_1);
po35$enc_1 = xor(keyinput88, po35);

#locking next scan-cell in scan-chain
po36$enc = xor(keyinput53, po36$enc_36);
po36$enc_36 = xor(keyinput54, po36$enc_35);
po36$enc_35 = xor(keyinput55, po36$enc_34);
po36$enc_34 = xor(keyinput56, po36$enc_33);
po36$enc_33 = xor(keyinput57, po36$enc_32);
po36$enc_32 = xor(keyinput58, po36$enc_31);
po36$enc_31 = xor(keyinput59, po36$enc_30);
po36$enc_30 = xor(keyinput60, po36$enc_29);
po36$enc_29 = xor(keyinput61, po36$enc_28);
po36$enc_28 = xor(keyinput62, po36$enc_27);
po36$enc_27 = xor(keyinput63, po36$enc_26);
po36$enc_26 = xor(keyinput64, po36$enc_25);
po36$enc_25 = xor(keyinput65, po36$enc_24);
po36$enc_24 = xor(keyinput66, po36$enc_23);
po36$enc_23 = xor(keyinput67, po36$enc_22);
po36$enc_22 = xor(keyinput68, po36$enc_21);
po36$enc_21 = xor(keyinput69, po36$enc_20);
po36$enc_20 = xor(keyinput70, po36$enc_19);
po36$enc_19 = xor(keyinput71, po36$enc_18);
po36$enc_18 = xor(keyinput72, po36$enc_17);
po36$enc_17 = xor(keyinput73, po36$enc_16);
po36$enc_16 = xor(keyinput74, po36$enc_15);
po36$enc_15 = xor(keyinput75, po36$enc_14);
po36$enc_14 = xor(keyinput76, po36$enc_13);
po36$enc_13 = xor(keyinput77, po36$enc_12);
po36$enc_12 = xor(keyinput78, po36$enc_11);
po36$enc_11 = xor(keyinput79, po36$enc_10);
po36$enc_10 = xor(keyinput80, po36$enc_9);
po36$enc_9 = xor(keyinput81, po36$enc_8);
po36$enc_8 = xor(keyinput82, po36$enc_7);
po36$enc_7 = xor(keyinput83, po36$enc_6);
po36$enc_6 = xor(keyinput84, po36$enc_5);
po36$enc_5 = xor(keyinput85, po36$enc_4);
po36$enc_4 = xor(keyinput86, po36$enc_3);
po36$enc_3 = xor(keyinput87, po36$enc_2);
po36$enc_2 = xor(keyinput88, po36$enc_1);
po36$enc_1 = xor(keyinput89, po36);

#locking next scan-cell in scan-chain
po37$enc = xor(keyinput53, po37$enc_37);
po37$enc_37 = xor(keyinput54, po37$enc_36);
po37$enc_36 = xor(keyinput55, po37$enc_35);
po37$enc_35 = xor(keyinput56, po37$enc_34);
po37$enc_34 = xor(keyinput57, po37$enc_33);
po37$enc_33 = xor(keyinput58, po37$enc_32);
po37$enc_32 = xor(keyinput59, po37$enc_31);
po37$enc_31 = xor(keyinput60, po37$enc_30);
po37$enc_30 = xor(keyinput61, po37$enc_29);
po37$enc_29 = xor(keyinput62, po37$enc_28);
po37$enc_28 = xor(keyinput63, po37$enc_27);
po37$enc_27 = xor(keyinput64, po37$enc_26);
po37$enc_26 = xor(keyinput65, po37$enc_25);
po37$enc_25 = xor(keyinput66, po37$enc_24);
po37$enc_24 = xor(keyinput67, po37$enc_23);
po37$enc_23 = xor(keyinput68, po37$enc_22);
po37$enc_22 = xor(keyinput69, po37$enc_21);
po37$enc_21 = xor(keyinput70, po37$enc_20);
po37$enc_20 = xor(keyinput71, po37$enc_19);
po37$enc_19 = xor(keyinput72, po37$enc_18);
po37$enc_18 = xor(keyinput73, po37$enc_17);
po37$enc_17 = xor(keyinput74, po37$enc_16);
po37$enc_16 = xor(keyinput75, po37$enc_15);
po37$enc_15 = xor(keyinput76, po37$enc_14);
po37$enc_14 = xor(keyinput77, po37$enc_13);
po37$enc_13 = xor(keyinput78, po37$enc_12);
po37$enc_12 = xor(keyinput79, po37$enc_11);
po37$enc_11 = xor(keyinput80, po37$enc_10);
po37$enc_10 = xor(keyinput81, po37$enc_9);
po37$enc_9 = xor(keyinput82, po37$enc_8);
po37$enc_8 = xor(keyinput83, po37$enc_7);
po37$enc_7 = xor(keyinput84, po37$enc_6);
po37$enc_6 = xor(keyinput85, po37$enc_5);
po37$enc_5 = xor(keyinput86, po37$enc_4);
po37$enc_4 = xor(keyinput87, po37$enc_3);
po37$enc_3 = xor(keyinput88, po37$enc_2);
po37$enc_2 = xor(keyinput89, po37$enc_1);
po37$enc_1 = xor(keyinput90, po37);

#locking next scan-cell in scan-chain
po38$enc = xor(keyinput53, po38$enc_38);
po38$enc_38 = xor(keyinput54, po38$enc_37);
po38$enc_37 = xor(keyinput55, po38$enc_36);
po38$enc_36 = xor(keyinput56, po38$enc_35);
po38$enc_35 = xor(keyinput57, po38$enc_34);
po38$enc_34 = xor(keyinput58, po38$enc_33);
po38$enc_33 = xor(keyinput59, po38$enc_32);
po38$enc_32 = xor(keyinput60, po38$enc_31);
po38$enc_31 = xor(keyinput61, po38$enc_30);
po38$enc_30 = xor(keyinput62, po38$enc_29);
po38$enc_29 = xor(keyinput63, po38$enc_28);
po38$enc_28 = xor(keyinput64, po38$enc_27);
po38$enc_27 = xor(keyinput65, po38$enc_26);
po38$enc_26 = xor(keyinput66, po38$enc_25);
po38$enc_25 = xor(keyinput67, po38$enc_24);
po38$enc_24 = xor(keyinput68, po38$enc_23);
po38$enc_23 = xor(keyinput69, po38$enc_22);
po38$enc_22 = xor(keyinput70, po38$enc_21);
po38$enc_21 = xor(keyinput71, po38$enc_20);
po38$enc_20 = xor(keyinput72, po38$enc_19);
po38$enc_19 = xor(keyinput73, po38$enc_18);
po38$enc_18 = xor(keyinput74, po38$enc_17);
po38$enc_17 = xor(keyinput75, po38$enc_16);
po38$enc_16 = xor(keyinput76, po38$enc_15);
po38$enc_15 = xor(keyinput77, po38$enc_14);
po38$enc_14 = xor(keyinput78, po38$enc_13);
po38$enc_13 = xor(keyinput79, po38$enc_12);
po38$enc_12 = xor(keyinput80, po38$enc_11);
po38$enc_11 = xor(keyinput81, po38$enc_10);
po38$enc_10 = xor(keyinput82, po38$enc_9);
po38$enc_9 = xor(keyinput83, po38$enc_8);
po38$enc_8 = xor(keyinput84, po38$enc_7);
po38$enc_7 = xor(keyinput85, po38$enc_6);
po38$enc_6 = xor(keyinput86, po38$enc_5);
po38$enc_5 = xor(keyinput87, po38$enc_4);
po38$enc_4 = xor(keyinput88, po38$enc_3);
po38$enc_3 = xor(keyinput89, po38$enc_2);
po38$enc_2 = xor(keyinput90, po38$enc_1);
po38$enc_1 = xor(keyinput91, po38);

#locking next scan-cell in scan-chain
po39$enc = xor(keyinput53, po39$enc_39);
po39$enc_39 = xor(keyinput54, po39$enc_38);
po39$enc_38 = xor(keyinput55, po39$enc_37);
po39$enc_37 = xor(keyinput56, po39$enc_36);
po39$enc_36 = xor(keyinput57, po39$enc_35);
po39$enc_35 = xor(keyinput58, po39$enc_34);
po39$enc_34 = xor(keyinput59, po39$enc_33);
po39$enc_33 = xor(keyinput60, po39$enc_32);
po39$enc_32 = xor(keyinput61, po39$enc_31);
po39$enc_31 = xor(keyinput62, po39$enc_30);
po39$enc_30 = xor(keyinput63, po39$enc_29);
po39$enc_29 = xor(keyinput64, po39$enc_28);
po39$enc_28 = xor(keyinput65, po39$enc_27);
po39$enc_27 = xor(keyinput66, po39$enc_26);
po39$enc_26 = xor(keyinput67, po39$enc_25);
po39$enc_25 = xor(keyinput68, po39$enc_24);
po39$enc_24 = xor(keyinput69, po39$enc_23);
po39$enc_23 = xor(keyinput70, po39$enc_22);
po39$enc_22 = xor(keyinput71, po39$enc_21);
po39$enc_21 = xor(keyinput72, po39$enc_20);
po39$enc_20 = xor(keyinput73, po39$enc_19);
po39$enc_19 = xor(keyinput74, po39$enc_18);
po39$enc_18 = xor(keyinput75, po39$enc_17);
po39$enc_17 = xor(keyinput76, po39$enc_16);
po39$enc_16 = xor(keyinput77, po39$enc_15);
po39$enc_15 = xor(keyinput78, po39$enc_14);
po39$enc_14 = xor(keyinput79, po39$enc_13);
po39$enc_13 = xor(keyinput80, po39$enc_12);
po39$enc_12 = xor(keyinput81, po39$enc_11);
po39$enc_11 = xor(keyinput82, po39$enc_10);
po39$enc_10 = xor(keyinput83, po39$enc_9);
po39$enc_9 = xor(keyinput84, po39$enc_8);
po39$enc_8 = xor(keyinput85, po39$enc_7);
po39$enc_7 = xor(keyinput86, po39$enc_6);
po39$enc_6 = xor(keyinput87, po39$enc_5);
po39$enc_5 = xor(keyinput88, po39$enc_4);
po39$enc_4 = xor(keyinput89, po39$enc_3);
po39$enc_3 = xor(keyinput90, po39$enc_2);
po39$enc_2 = xor(keyinput91, po39$enc_1);
po39$enc_1 = xor(keyinput92, po39);

#locking next scan-cell in scan-chain
po40$enc = xor(keyinput53, po40$enc_40);
po40$enc_40 = xor(keyinput54, po40$enc_39);
po40$enc_39 = xor(keyinput55, po40$enc_38);
po40$enc_38 = xor(keyinput56, po40$enc_37);
po40$enc_37 = xor(keyinput57, po40$enc_36);
po40$enc_36 = xor(keyinput58, po40$enc_35);
po40$enc_35 = xor(keyinput59, po40$enc_34);
po40$enc_34 = xor(keyinput60, po40$enc_33);
po40$enc_33 = xor(keyinput61, po40$enc_32);
po40$enc_32 = xor(keyinput62, po40$enc_31);
po40$enc_31 = xor(keyinput63, po40$enc_30);
po40$enc_30 = xor(keyinput64, po40$enc_29);
po40$enc_29 = xor(keyinput65, po40$enc_28);
po40$enc_28 = xor(keyinput66, po40$enc_27);
po40$enc_27 = xor(keyinput67, po40$enc_26);
po40$enc_26 = xor(keyinput68, po40$enc_25);
po40$enc_25 = xor(keyinput69, po40$enc_24);
po40$enc_24 = xor(keyinput70, po40$enc_23);
po40$enc_23 = xor(keyinput71, po40$enc_22);
po40$enc_22 = xor(keyinput72, po40$enc_21);
po40$enc_21 = xor(keyinput73, po40$enc_20);
po40$enc_20 = xor(keyinput74, po40$enc_19);
po40$enc_19 = xor(keyinput75, po40$enc_18);
po40$enc_18 = xor(keyinput76, po40$enc_17);
po40$enc_17 = xor(keyinput77, po40$enc_16);
po40$enc_16 = xor(keyinput78, po40$enc_15);
po40$enc_15 = xor(keyinput79, po40$enc_14);
po40$enc_14 = xor(keyinput80, po40$enc_13);
po40$enc_13 = xor(keyinput81, po40$enc_12);
po40$enc_12 = xor(keyinput82, po40$enc_11);
po40$enc_11 = xor(keyinput83, po40$enc_10);
po40$enc_10 = xor(keyinput84, po40$enc_9);
po40$enc_9 = xor(keyinput85, po40$enc_8);
po40$enc_8 = xor(keyinput86, po40$enc_7);
po40$enc_7 = xor(keyinput87, po40$enc_6);
po40$enc_6 = xor(keyinput88, po40$enc_5);
po40$enc_5 = xor(keyinput89, po40$enc_4);
po40$enc_4 = xor(keyinput90, po40$enc_3);
po40$enc_3 = xor(keyinput91, po40$enc_2);
po40$enc_2 = xor(keyinput92, po40$enc_1);
po40$enc_1 = xor(keyinput93, po40);

#locking next scan-cell in scan-chain
po41$enc = xor(keyinput53, po41$enc_41);
po41$enc_41 = xor(keyinput54, po41$enc_40);
po41$enc_40 = xor(keyinput55, po41$enc_39);
po41$enc_39 = xor(keyinput56, po41$enc_38);
po41$enc_38 = xor(keyinput57, po41$enc_37);
po41$enc_37 = xor(keyinput58, po41$enc_36);
po41$enc_36 = xor(keyinput59, po41$enc_35);
po41$enc_35 = xor(keyinput60, po41$enc_34);
po41$enc_34 = xor(keyinput61, po41$enc_33);
po41$enc_33 = xor(keyinput62, po41$enc_32);
po41$enc_32 = xor(keyinput63, po41$enc_31);
po41$enc_31 = xor(keyinput64, po41$enc_30);
po41$enc_30 = xor(keyinput65, po41$enc_29);
po41$enc_29 = xor(keyinput66, po41$enc_28);
po41$enc_28 = xor(keyinput67, po41$enc_27);
po41$enc_27 = xor(keyinput68, po41$enc_26);
po41$enc_26 = xor(keyinput69, po41$enc_25);
po41$enc_25 = xor(keyinput70, po41$enc_24);
po41$enc_24 = xor(keyinput71, po41$enc_23);
po41$enc_23 = xor(keyinput72, po41$enc_22);
po41$enc_22 = xor(keyinput73, po41$enc_21);
po41$enc_21 = xor(keyinput74, po41$enc_20);
po41$enc_20 = xor(keyinput75, po41$enc_19);
po41$enc_19 = xor(keyinput76, po41$enc_18);
po41$enc_18 = xor(keyinput77, po41$enc_17);
po41$enc_17 = xor(keyinput78, po41$enc_16);
po41$enc_16 = xor(keyinput79, po41$enc_15);
po41$enc_15 = xor(keyinput80, po41$enc_14);
po41$enc_14 = xor(keyinput81, po41$enc_13);
po41$enc_13 = xor(keyinput82, po41$enc_12);
po41$enc_12 = xor(keyinput83, po41$enc_11);
po41$enc_11 = xor(keyinput84, po41$enc_10);
po41$enc_10 = xor(keyinput85, po41$enc_9);
po41$enc_9 = xor(keyinput86, po41$enc_8);
po41$enc_8 = xor(keyinput87, po41$enc_7);
po41$enc_7 = xor(keyinput88, po41$enc_6);
po41$enc_6 = xor(keyinput89, po41$enc_5);
po41$enc_5 = xor(keyinput90, po41$enc_4);
po41$enc_4 = xor(keyinput91, po41$enc_3);
po41$enc_3 = xor(keyinput92, po41$enc_2);
po41$enc_2 = xor(keyinput93, po41$enc_1);
po41$enc_1 = xor(keyinput94, po41);

#locking next scan-cell in scan-chain
po42$enc = xor(keyinput53, po42$enc_42);
po42$enc_42 = xor(keyinput54, po42$enc_41);
po42$enc_41 = xor(keyinput55, po42$enc_40);
po42$enc_40 = xor(keyinput56, po42$enc_39);
po42$enc_39 = xor(keyinput57, po42$enc_38);
po42$enc_38 = xor(keyinput58, po42$enc_37);
po42$enc_37 = xor(keyinput59, po42$enc_36);
po42$enc_36 = xor(keyinput60, po42$enc_35);
po42$enc_35 = xor(keyinput61, po42$enc_34);
po42$enc_34 = xor(keyinput62, po42$enc_33);
po42$enc_33 = xor(keyinput63, po42$enc_32);
po42$enc_32 = xor(keyinput64, po42$enc_31);
po42$enc_31 = xor(keyinput65, po42$enc_30);
po42$enc_30 = xor(keyinput66, po42$enc_29);
po42$enc_29 = xor(keyinput67, po42$enc_28);
po42$enc_28 = xor(keyinput68, po42$enc_27);
po42$enc_27 = xor(keyinput69, po42$enc_26);
po42$enc_26 = xor(keyinput70, po42$enc_25);
po42$enc_25 = xor(keyinput71, po42$enc_24);
po42$enc_24 = xor(keyinput72, po42$enc_23);
po42$enc_23 = xor(keyinput73, po42$enc_22);
po42$enc_22 = xor(keyinput74, po42$enc_21);
po42$enc_21 = xor(keyinput75, po42$enc_20);
po42$enc_20 = xor(keyinput76, po42$enc_19);
po42$enc_19 = xor(keyinput77, po42$enc_18);
po42$enc_18 = xor(keyinput78, po42$enc_17);
po42$enc_17 = xor(keyinput79, po42$enc_16);
po42$enc_16 = xor(keyinput80, po42$enc_15);
po42$enc_15 = xor(keyinput81, po42$enc_14);
po42$enc_14 = xor(keyinput82, po42$enc_13);
po42$enc_13 = xor(keyinput83, po42$enc_12);
po42$enc_12 = xor(keyinput84, po42$enc_11);
po42$enc_11 = xor(keyinput85, po42$enc_10);
po42$enc_10 = xor(keyinput86, po42$enc_9);
po42$enc_9 = xor(keyinput87, po42$enc_8);
po42$enc_8 = xor(keyinput88, po42$enc_7);
po42$enc_7 = xor(keyinput89, po42$enc_6);
po42$enc_6 = xor(keyinput90, po42$enc_5);
po42$enc_5 = xor(keyinput91, po42$enc_4);
po42$enc_4 = xor(keyinput92, po42$enc_3);
po42$enc_3 = xor(keyinput93, po42$enc_2);
po42$enc_2 = xor(keyinput94, po42$enc_1);
po42$enc_1 = xor(keyinput95, po42);

#locking next scan-cell in scan-chain
po43$enc = xor(keyinput53, po43$enc_43);
po43$enc_43 = xor(keyinput54, po43$enc_42);
po43$enc_42 = xor(keyinput55, po43$enc_41);
po43$enc_41 = xor(keyinput56, po43$enc_40);
po43$enc_40 = xor(keyinput57, po43$enc_39);
po43$enc_39 = xor(keyinput58, po43$enc_38);
po43$enc_38 = xor(keyinput59, po43$enc_37);
po43$enc_37 = xor(keyinput60, po43$enc_36);
po43$enc_36 = xor(keyinput61, po43$enc_35);
po43$enc_35 = xor(keyinput62, po43$enc_34);
po43$enc_34 = xor(keyinput63, po43$enc_33);
po43$enc_33 = xor(keyinput64, po43$enc_32);
po43$enc_32 = xor(keyinput65, po43$enc_31);
po43$enc_31 = xor(keyinput66, po43$enc_30);
po43$enc_30 = xor(keyinput67, po43$enc_29);
po43$enc_29 = xor(keyinput68, po43$enc_28);
po43$enc_28 = xor(keyinput69, po43$enc_27);
po43$enc_27 = xor(keyinput70, po43$enc_26);
po43$enc_26 = xor(keyinput71, po43$enc_25);
po43$enc_25 = xor(keyinput72, po43$enc_24);
po43$enc_24 = xor(keyinput73, po43$enc_23);
po43$enc_23 = xor(keyinput74, po43$enc_22);
po43$enc_22 = xor(keyinput75, po43$enc_21);
po43$enc_21 = xor(keyinput76, po43$enc_20);
po43$enc_20 = xor(keyinput77, po43$enc_19);
po43$enc_19 = xor(keyinput78, po43$enc_18);
po43$enc_18 = xor(keyinput79, po43$enc_17);
po43$enc_17 = xor(keyinput80, po43$enc_16);
po43$enc_16 = xor(keyinput81, po43$enc_15);
po43$enc_15 = xor(keyinput82, po43$enc_14);
po43$enc_14 = xor(keyinput83, po43$enc_13);
po43$enc_13 = xor(keyinput84, po43$enc_12);
po43$enc_12 = xor(keyinput85, po43$enc_11);
po43$enc_11 = xor(keyinput86, po43$enc_10);
po43$enc_10 = xor(keyinput87, po43$enc_9);
po43$enc_9 = xor(keyinput88, po43$enc_8);
po43$enc_8 = xor(keyinput89, po43$enc_7);
po43$enc_7 = xor(keyinput90, po43$enc_6);
po43$enc_6 = xor(keyinput91, po43$enc_5);
po43$enc_5 = xor(keyinput92, po43$enc_4);
po43$enc_4 = xor(keyinput93, po43$enc_3);
po43$enc_3 = xor(keyinput94, po43$enc_2);
po43$enc_2 = xor(keyinput95, po43$enc_1);
po43$enc_1 = xor(keyinput96, po43enc);

#locking next scan-cell in scan-chain
po44$enc = xor(keyinput53, po44$enc_44);
po44$enc_44 = xor(keyinput54, po44$enc_43);
po44$enc_43 = xor(keyinput55, po44$enc_42);
po44$enc_42 = xor(keyinput56, po44$enc_41);
po44$enc_41 = xor(keyinput57, po44$enc_40);
po44$enc_40 = xor(keyinput58, po44$enc_39);
po44$enc_39 = xor(keyinput59, po44$enc_38);
po44$enc_38 = xor(keyinput60, po44$enc_37);
po44$enc_37 = xor(keyinput61, po44$enc_36);
po44$enc_36 = xor(keyinput62, po44$enc_35);
po44$enc_35 = xor(keyinput63, po44$enc_34);
po44$enc_34 = xor(keyinput64, po44$enc_33);
po44$enc_33 = xor(keyinput65, po44$enc_32);
po44$enc_32 = xor(keyinput66, po44$enc_31);
po44$enc_31 = xor(keyinput67, po44$enc_30);
po44$enc_30 = xor(keyinput68, po44$enc_29);
po44$enc_29 = xor(keyinput69, po44$enc_28);
po44$enc_28 = xor(keyinput70, po44$enc_27);
po44$enc_27 = xor(keyinput71, po44$enc_26);
po44$enc_26 = xor(keyinput72, po44$enc_25);
po44$enc_25 = xor(keyinput73, po44$enc_24);
po44$enc_24 = xor(keyinput74, po44$enc_23);
po44$enc_23 = xor(keyinput75, po44$enc_22);
po44$enc_22 = xor(keyinput76, po44$enc_21);
po44$enc_21 = xor(keyinput77, po44$enc_20);
po44$enc_20 = xor(keyinput78, po44$enc_19);
po44$enc_19 = xor(keyinput79, po44$enc_18);
po44$enc_18 = xor(keyinput80, po44$enc_17);
po44$enc_17 = xor(keyinput81, po44$enc_16);
po44$enc_16 = xor(keyinput82, po44$enc_15);
po44$enc_15 = xor(keyinput83, po44$enc_14);
po44$enc_14 = xor(keyinput84, po44$enc_13);
po44$enc_13 = xor(keyinput85, po44$enc_12);
po44$enc_12 = xor(keyinput86, po44$enc_11);
po44$enc_11 = xor(keyinput87, po44$enc_10);
po44$enc_10 = xor(keyinput88, po44$enc_9);
po44$enc_9 = xor(keyinput89, po44$enc_8);
po44$enc_8 = xor(keyinput90, po44$enc_7);
po44$enc_7 = xor(keyinput91, po44$enc_6);
po44$enc_6 = xor(keyinput92, po44$enc_5);
po44$enc_5 = xor(keyinput93, po44$enc_4);
po44$enc_4 = xor(keyinput94, po44$enc_3);
po44$enc_3 = xor(keyinput95, po44$enc_2);
po44$enc_2 = xor(keyinput96, po44$enc_1);
po44$enc_1 = xor(keyinput97, po44);

#locking next scan-cell in scan-chain
po45$enc = xor(keyinput53, po45$enc_45);
po45$enc_45 = xor(keyinput54, po45$enc_44);
po45$enc_44 = xor(keyinput55, po45$enc_43);
po45$enc_43 = xor(keyinput56, po45$enc_42);
po45$enc_42 = xor(keyinput57, po45$enc_41);
po45$enc_41 = xor(keyinput58, po45$enc_40);
po45$enc_40 = xor(keyinput59, po45$enc_39);
po45$enc_39 = xor(keyinput60, po45$enc_38);
po45$enc_38 = xor(keyinput61, po45$enc_37);
po45$enc_37 = xor(keyinput62, po45$enc_36);
po45$enc_36 = xor(keyinput63, po45$enc_35);
po45$enc_35 = xor(keyinput64, po45$enc_34);
po45$enc_34 = xor(keyinput65, po45$enc_33);
po45$enc_33 = xor(keyinput66, po45$enc_32);
po45$enc_32 = xor(keyinput67, po45$enc_31);
po45$enc_31 = xor(keyinput68, po45$enc_30);
po45$enc_30 = xor(keyinput69, po45$enc_29);
po45$enc_29 = xor(keyinput70, po45$enc_28);
po45$enc_28 = xor(keyinput71, po45$enc_27);
po45$enc_27 = xor(keyinput72, po45$enc_26);
po45$enc_26 = xor(keyinput73, po45$enc_25);
po45$enc_25 = xor(keyinput74, po45$enc_24);
po45$enc_24 = xor(keyinput75, po45$enc_23);
po45$enc_23 = xor(keyinput76, po45$enc_22);
po45$enc_22 = xor(keyinput77, po45$enc_21);
po45$enc_21 = xor(keyinput78, po45$enc_20);
po45$enc_20 = xor(keyinput79, po45$enc_19);
po45$enc_19 = xor(keyinput80, po45$enc_18);
po45$enc_18 = xor(keyinput81, po45$enc_17);
po45$enc_17 = xor(keyinput82, po45$enc_16);
po45$enc_16 = xor(keyinput83, po45$enc_15);
po45$enc_15 = xor(keyinput84, po45$enc_14);
po45$enc_14 = xor(keyinput85, po45$enc_13);
po45$enc_13 = xor(keyinput86, po45$enc_12);
po45$enc_12 = xor(keyinput87, po45$enc_11);
po45$enc_11 = xor(keyinput88, po45$enc_10);
po45$enc_10 = xor(keyinput89, po45$enc_9);
po45$enc_9 = xor(keyinput90, po45$enc_8);
po45$enc_8 = xor(keyinput91, po45$enc_7);
po45$enc_7 = xor(keyinput92, po45$enc_6);
po45$enc_6 = xor(keyinput93, po45$enc_5);
po45$enc_5 = xor(keyinput94, po45$enc_4);
po45$enc_4 = xor(keyinput95, po45$enc_3);
po45$enc_3 = xor(keyinput96, po45$enc_2);
po45$enc_2 = xor(keyinput97, po45$enc_1);
po45$enc_1 = xor(keyinput98, po45);

#locking next scan-cell in scan-chain
po46$enc = xor(keyinput53, po46$enc_46);
po46$enc_46 = xor(keyinput54, po46$enc_45);
po46$enc_45 = xor(keyinput55, po46$enc_44);
po46$enc_44 = xor(keyinput56, po46$enc_43);
po46$enc_43 = xor(keyinput57, po46$enc_42);
po46$enc_42 = xor(keyinput58, po46$enc_41);
po46$enc_41 = xor(keyinput59, po46$enc_40);
po46$enc_40 = xor(keyinput60, po46$enc_39);
po46$enc_39 = xor(keyinput61, po46$enc_38);
po46$enc_38 = xor(keyinput62, po46$enc_37);
po46$enc_37 = xor(keyinput63, po46$enc_36);
po46$enc_36 = xor(keyinput64, po46$enc_35);
po46$enc_35 = xor(keyinput65, po46$enc_34);
po46$enc_34 = xor(keyinput66, po46$enc_33);
po46$enc_33 = xor(keyinput67, po46$enc_32);
po46$enc_32 = xor(keyinput68, po46$enc_31);
po46$enc_31 = xor(keyinput69, po46$enc_30);
po46$enc_30 = xor(keyinput70, po46$enc_29);
po46$enc_29 = xor(keyinput71, po46$enc_28);
po46$enc_28 = xor(keyinput72, po46$enc_27);
po46$enc_27 = xor(keyinput73, po46$enc_26);
po46$enc_26 = xor(keyinput74, po46$enc_25);
po46$enc_25 = xor(keyinput75, po46$enc_24);
po46$enc_24 = xor(keyinput76, po46$enc_23);
po46$enc_23 = xor(keyinput77, po46$enc_22);
po46$enc_22 = xor(keyinput78, po46$enc_21);
po46$enc_21 = xor(keyinput79, po46$enc_20);
po46$enc_20 = xor(keyinput80, po46$enc_19);
po46$enc_19 = xor(keyinput81, po46$enc_18);
po46$enc_18 = xor(keyinput82, po46$enc_17);
po46$enc_17 = xor(keyinput83, po46$enc_16);
po46$enc_16 = xor(keyinput84, po46$enc_15);
po46$enc_15 = xor(keyinput85, po46$enc_14);
po46$enc_14 = xor(keyinput86, po46$enc_13);
po46$enc_13 = xor(keyinput87, po46$enc_12);
po46$enc_12 = xor(keyinput88, po46$enc_11);
po46$enc_11 = xor(keyinput89, po46$enc_10);
po46$enc_10 = xor(keyinput90, po46$enc_9);
po46$enc_9 = xor(keyinput91, po46$enc_8);
po46$enc_8 = xor(keyinput92, po46$enc_7);
po46$enc_7 = xor(keyinput93, po46$enc_6);
po46$enc_6 = xor(keyinput94, po46$enc_5);
po46$enc_5 = xor(keyinput95, po46$enc_4);
po46$enc_4 = xor(keyinput96, po46$enc_3);
po46$enc_3 = xor(keyinput97, po46$enc_2);
po46$enc_2 = xor(keyinput98, po46$enc_1);
po46$enc_1 = xor(keyinput99, po46);

#locking next scan-cell in scan-chain
po47$enc = xor(keyinput53, po47$enc_47);
po47$enc_47 = xor(keyinput54, po47$enc_46);
po47$enc_46 = xor(keyinput55, po47$enc_45);
po47$enc_45 = xor(keyinput56, po47$enc_44);
po47$enc_44 = xor(keyinput57, po47$enc_43);
po47$enc_43 = xor(keyinput58, po47$enc_42);
po47$enc_42 = xor(keyinput59, po47$enc_41);
po47$enc_41 = xor(keyinput60, po47$enc_40);
po47$enc_40 = xor(keyinput61, po47$enc_39);
po47$enc_39 = xor(keyinput62, po47$enc_38);
po47$enc_38 = xor(keyinput63, po47$enc_37);
po47$enc_37 = xor(keyinput64, po47$enc_36);
po47$enc_36 = xor(keyinput65, po47$enc_35);
po47$enc_35 = xor(keyinput66, po47$enc_34);
po47$enc_34 = xor(keyinput67, po47$enc_33);
po47$enc_33 = xor(keyinput68, po47$enc_32);
po47$enc_32 = xor(keyinput69, po47$enc_31);
po47$enc_31 = xor(keyinput70, po47$enc_30);
po47$enc_30 = xor(keyinput71, po47$enc_29);
po47$enc_29 = xor(keyinput72, po47$enc_28);
po47$enc_28 = xor(keyinput73, po47$enc_27);
po47$enc_27 = xor(keyinput74, po47$enc_26);
po47$enc_26 = xor(keyinput75, po47$enc_25);
po47$enc_25 = xor(keyinput76, po47$enc_24);
po47$enc_24 = xor(keyinput77, po47$enc_23);
po47$enc_23 = xor(keyinput78, po47$enc_22);
po47$enc_22 = xor(keyinput79, po47$enc_21);
po47$enc_21 = xor(keyinput80, po47$enc_20);
po47$enc_20 = xor(keyinput81, po47$enc_19);
po47$enc_19 = xor(keyinput82, po47$enc_18);
po47$enc_18 = xor(keyinput83, po47$enc_17);
po47$enc_17 = xor(keyinput84, po47$enc_16);
po47$enc_16 = xor(keyinput85, po47$enc_15);
po47$enc_15 = xor(keyinput86, po47$enc_14);
po47$enc_14 = xor(keyinput87, po47$enc_13);
po47$enc_13 = xor(keyinput88, po47$enc_12);
po47$enc_12 = xor(keyinput89, po47$enc_11);
po47$enc_11 = xor(keyinput90, po47$enc_10);
po47$enc_10 = xor(keyinput91, po47$enc_9);
po47$enc_9 = xor(keyinput92, po47$enc_8);
po47$enc_8 = xor(keyinput93, po47$enc_7);
po47$enc_7 = xor(keyinput94, po47$enc_6);
po47$enc_6 = xor(keyinput95, po47$enc_5);
po47$enc_5 = xor(keyinput96, po47$enc_4);
po47$enc_4 = xor(keyinput97, po47$enc_3);
po47$enc_3 = xor(keyinput98, po47$enc_2);
po47$enc_2 = xor(keyinput99, po47$enc_1);
po47$enc_1 = xor(keyinput100, po47);

#locking next scan-cell in scan-chain
po48$enc = xor(keyinput53, po48$enc_48);
po48$enc_48 = xor(keyinput54, po48$enc_47);
po48$enc_47 = xor(keyinput55, po48$enc_46);
po48$enc_46 = xor(keyinput56, po48$enc_45);
po48$enc_45 = xor(keyinput57, po48$enc_44);
po48$enc_44 = xor(keyinput58, po48$enc_43);
po48$enc_43 = xor(keyinput59, po48$enc_42);
po48$enc_42 = xor(keyinput60, po48$enc_41);
po48$enc_41 = xor(keyinput61, po48$enc_40);
po48$enc_40 = xor(keyinput62, po48$enc_39);
po48$enc_39 = xor(keyinput63, po48$enc_38);
po48$enc_38 = xor(keyinput64, po48$enc_37);
po48$enc_37 = xor(keyinput65, po48$enc_36);
po48$enc_36 = xor(keyinput66, po48$enc_35);
po48$enc_35 = xor(keyinput67, po48$enc_34);
po48$enc_34 = xor(keyinput68, po48$enc_33);
po48$enc_33 = xor(keyinput69, po48$enc_32);
po48$enc_32 = xor(keyinput70, po48$enc_31);
po48$enc_31 = xor(keyinput71, po48$enc_30);
po48$enc_30 = xor(keyinput72, po48$enc_29);
po48$enc_29 = xor(keyinput73, po48$enc_28);
po48$enc_28 = xor(keyinput74, po48$enc_27);
po48$enc_27 = xor(keyinput75, po48$enc_26);
po48$enc_26 = xor(keyinput76, po48$enc_25);
po48$enc_25 = xor(keyinput77, po48$enc_24);
po48$enc_24 = xor(keyinput78, po48$enc_23);
po48$enc_23 = xor(keyinput79, po48$enc_22);
po48$enc_22 = xor(keyinput80, po48$enc_21);
po48$enc_21 = xor(keyinput81, po48$enc_20);
po48$enc_20 = xor(keyinput82, po48$enc_19);
po48$enc_19 = xor(keyinput83, po48$enc_18);
po48$enc_18 = xor(keyinput84, po48$enc_17);
po48$enc_17 = xor(keyinput85, po48$enc_16);
po48$enc_16 = xor(keyinput86, po48$enc_15);
po48$enc_15 = xor(keyinput87, po48$enc_14);
po48$enc_14 = xor(keyinput88, po48$enc_13);
po48$enc_13 = xor(keyinput89, po48$enc_12);
po48$enc_12 = xor(keyinput90, po48$enc_11);
po48$enc_11 = xor(keyinput91, po48$enc_10);
po48$enc_10 = xor(keyinput92, po48$enc_9);
po48$enc_9 = xor(keyinput93, po48$enc_8);
po48$enc_8 = xor(keyinput94, po48$enc_7);
po48$enc_7 = xor(keyinput95, po48$enc_6);
po48$enc_6 = xor(keyinput96, po48$enc_5);
po48$enc_5 = xor(keyinput97, po48$enc_4);
po48$enc_4 = xor(keyinput98, po48$enc_3);
po48$enc_3 = xor(keyinput99, po48$enc_2);
po48$enc_2 = xor(keyinput100, po48$enc_1);
po48$enc_1 = xor(keyinput101, po48);

#locking next scan-cell in scan-chain
po49$enc = xor(keyinput53, po49$enc_49);
po49$enc_49 = xor(keyinput54, po49$enc_48);
po49$enc_48 = xor(keyinput55, po49$enc_47);
po49$enc_47 = xor(keyinput56, po49$enc_46);
po49$enc_46 = xor(keyinput57, po49$enc_45);
po49$enc_45 = xor(keyinput58, po49$enc_44);
po49$enc_44 = xor(keyinput59, po49$enc_43);
po49$enc_43 = xor(keyinput60, po49$enc_42);
po49$enc_42 = xor(keyinput61, po49$enc_41);
po49$enc_41 = xor(keyinput62, po49$enc_40);
po49$enc_40 = xor(keyinput63, po49$enc_39);
po49$enc_39 = xor(keyinput64, po49$enc_38);
po49$enc_38 = xor(keyinput65, po49$enc_37);
po49$enc_37 = xor(keyinput66, po49$enc_36);
po49$enc_36 = xor(keyinput67, po49$enc_35);
po49$enc_35 = xor(keyinput68, po49$enc_34);
po49$enc_34 = xor(keyinput69, po49$enc_33);
po49$enc_33 = xor(keyinput70, po49$enc_32);
po49$enc_32 = xor(keyinput71, po49$enc_31);
po49$enc_31 = xor(keyinput72, po49$enc_30);
po49$enc_30 = xor(keyinput73, po49$enc_29);
po49$enc_29 = xor(keyinput74, po49$enc_28);
po49$enc_28 = xor(keyinput75, po49$enc_27);
po49$enc_27 = xor(keyinput76, po49$enc_26);
po49$enc_26 = xor(keyinput77, po49$enc_25);
po49$enc_25 = xor(keyinput78, po49$enc_24);
po49$enc_24 = xor(keyinput79, po49$enc_23);
po49$enc_23 = xor(keyinput80, po49$enc_22);
po49$enc_22 = xor(keyinput81, po49$enc_21);
po49$enc_21 = xor(keyinput82, po49$enc_20);
po49$enc_20 = xor(keyinput83, po49$enc_19);
po49$enc_19 = xor(keyinput84, po49$enc_18);
po49$enc_18 = xor(keyinput85, po49$enc_17);
po49$enc_17 = xor(keyinput86, po49$enc_16);
po49$enc_16 = xor(keyinput87, po49$enc_15);
po49$enc_15 = xor(keyinput88, po49$enc_14);
po49$enc_14 = xor(keyinput89, po49$enc_13);
po49$enc_13 = xor(keyinput90, po49$enc_12);
po49$enc_12 = xor(keyinput91, po49$enc_11);
po49$enc_11 = xor(keyinput92, po49$enc_10);
po49$enc_10 = xor(keyinput93, po49$enc_9);
po49$enc_9 = xor(keyinput94, po49$enc_8);
po49$enc_8 = xor(keyinput95, po49$enc_7);
po49$enc_7 = xor(keyinput96, po49$enc_6);
po49$enc_6 = xor(keyinput97, po49$enc_5);
po49$enc_5 = xor(keyinput98, po49$enc_4);
po49$enc_4 = xor(keyinput99, po49$enc_3);
po49$enc_3 = xor(keyinput100, po49$enc_2);
po49$enc_2 = xor(keyinput101, po49$enc_1);
po49$enc_1 = xor(keyinput102, po49);

#locking next scan-cell in scan-chain
po50$enc = xor(keyinput53, po50$enc_50);
po50$enc_50 = xor(keyinput54, po50$enc_49);
po50$enc_49 = xor(keyinput55, po50$enc_48);
po50$enc_48 = xor(keyinput56, po50$enc_47);
po50$enc_47 = xor(keyinput57, po50$enc_46);
po50$enc_46 = xor(keyinput58, po50$enc_45);
po50$enc_45 = xor(keyinput59, po50$enc_44);
po50$enc_44 = xor(keyinput60, po50$enc_43);
po50$enc_43 = xor(keyinput61, po50$enc_42);
po50$enc_42 = xor(keyinput62, po50$enc_41);
po50$enc_41 = xor(keyinput63, po50$enc_40);
po50$enc_40 = xor(keyinput64, po50$enc_39);
po50$enc_39 = xor(keyinput65, po50$enc_38);
po50$enc_38 = xor(keyinput66, po50$enc_37);
po50$enc_37 = xor(keyinput67, po50$enc_36);
po50$enc_36 = xor(keyinput68, po50$enc_35);
po50$enc_35 = xor(keyinput69, po50$enc_34);
po50$enc_34 = xor(keyinput70, po50$enc_33);
po50$enc_33 = xor(keyinput71, po50$enc_32);
po50$enc_32 = xor(keyinput72, po50$enc_31);
po50$enc_31 = xor(keyinput73, po50$enc_30);
po50$enc_30 = xor(keyinput74, po50$enc_29);
po50$enc_29 = xor(keyinput75, po50$enc_28);
po50$enc_28 = xor(keyinput76, po50$enc_27);
po50$enc_27 = xor(keyinput77, po50$enc_26);
po50$enc_26 = xor(keyinput78, po50$enc_25);
po50$enc_25 = xor(keyinput79, po50$enc_24);
po50$enc_24 = xor(keyinput80, po50$enc_23);
po50$enc_23 = xor(keyinput81, po50$enc_22);
po50$enc_22 = xor(keyinput82, po50$enc_21);
po50$enc_21 = xor(keyinput83, po50$enc_20);
po50$enc_20 = xor(keyinput84, po50$enc_19);
po50$enc_19 = xor(keyinput85, po50$enc_18);
po50$enc_18 = xor(keyinput86, po50$enc_17);
po50$enc_17 = xor(keyinput87, po50$enc_16);
po50$enc_16 = xor(keyinput88, po50$enc_15);
po50$enc_15 = xor(keyinput89, po50$enc_14);
po50$enc_14 = xor(keyinput90, po50$enc_13);
po50$enc_13 = xor(keyinput91, po50$enc_12);
po50$enc_12 = xor(keyinput92, po50$enc_11);
po50$enc_11 = xor(keyinput93, po50$enc_10);
po50$enc_10 = xor(keyinput94, po50$enc_9);
po50$enc_9 = xor(keyinput95, po50$enc_8);
po50$enc_8 = xor(keyinput96, po50$enc_7);
po50$enc_7 = xor(keyinput97, po50$enc_6);
po50$enc_6 = xor(keyinput98, po50$enc_5);
po50$enc_5 = xor(keyinput99, po50$enc_4);
po50$enc_4 = xor(keyinput100, po50$enc_3);
po50$enc_3 = xor(keyinput101, po50$enc_2);
po50$enc_2 = xor(keyinput102, po50$enc_1);
po50$enc_1 = xor(keyinput103, po50);

#locking next scan-cell in scan-chain
po51$enc = xor(keyinput53, po51$enc_51);
po51$enc_51 = xor(keyinput54, po51$enc_50);
po51$enc_50 = xor(keyinput55, po51$enc_49);
po51$enc_49 = xor(keyinput56, po51$enc_48);
po51$enc_48 = xor(keyinput57, po51$enc_47);
po51$enc_47 = xor(keyinput58, po51$enc_46);
po51$enc_46 = xor(keyinput59, po51$enc_45);
po51$enc_45 = xor(keyinput60, po51$enc_44);
po51$enc_44 = xor(keyinput61, po51$enc_43);
po51$enc_43 = xor(keyinput62, po51$enc_42);
po51$enc_42 = xor(keyinput63, po51$enc_41);
po51$enc_41 = xor(keyinput64, po51$enc_40);
po51$enc_40 = xor(keyinput65, po51$enc_39);
po51$enc_39 = xor(keyinput66, po51$enc_38);
po51$enc_38 = xor(keyinput67, po51$enc_37);
po51$enc_37 = xor(keyinput68, po51$enc_36);
po51$enc_36 = xor(keyinput69, po51$enc_35);
po51$enc_35 = xor(keyinput70, po51$enc_34);
po51$enc_34 = xor(keyinput71, po51$enc_33);
po51$enc_33 = xor(keyinput72, po51$enc_32);
po51$enc_32 = xor(keyinput73, po51$enc_31);
po51$enc_31 = xor(keyinput74, po51$enc_30);
po51$enc_30 = xor(keyinput75, po51$enc_29);
po51$enc_29 = xor(keyinput76, po51$enc_28);
po51$enc_28 = xor(keyinput77, po51$enc_27);
po51$enc_27 = xor(keyinput78, po51$enc_26);
po51$enc_26 = xor(keyinput79, po51$enc_25);
po51$enc_25 = xor(keyinput80, po51$enc_24);
po51$enc_24 = xor(keyinput81, po51$enc_23);
po51$enc_23 = xor(keyinput82, po51$enc_22);
po51$enc_22 = xor(keyinput83, po51$enc_21);
po51$enc_21 = xor(keyinput84, po51$enc_20);
po51$enc_20 = xor(keyinput85, po51$enc_19);
po51$enc_19 = xor(keyinput86, po51$enc_18);
po51$enc_18 = xor(keyinput87, po51$enc_17);
po51$enc_17 = xor(keyinput88, po51$enc_16);
po51$enc_16 = xor(keyinput89, po51$enc_15);
po51$enc_15 = xor(keyinput90, po51$enc_14);
po51$enc_14 = xor(keyinput91, po51$enc_13);
po51$enc_13 = xor(keyinput92, po51$enc_12);
po51$enc_12 = xor(keyinput93, po51$enc_11);
po51$enc_11 = xor(keyinput94, po51$enc_10);
po51$enc_10 = xor(keyinput95, po51$enc_9);
po51$enc_9 = xor(keyinput96, po51$enc_8);
po51$enc_8 = xor(keyinput97, po51$enc_7);
po51$enc_7 = xor(keyinput98, po51$enc_6);
po51$enc_6 = xor(keyinput99, po51$enc_5);
po51$enc_5 = xor(keyinput100, po51$enc_4);
po51$enc_4 = xor(keyinput101, po51$enc_3);
po51$enc_3 = xor(keyinput102, po51$enc_2);
po51$enc_2 = xor(keyinput103, po51$enc_1);
po51$enc_1 = xor(keyinput104, po51);

#locking next scan-cell in scan-chain
po52$enc = xor(keyinput53, po52$enc_52);
po52$enc_52 = xor(keyinput54, po52$enc_51);
po52$enc_51 = xor(keyinput55, po52$enc_50);
po52$enc_50 = xor(keyinput56, po52$enc_49);
po52$enc_49 = xor(keyinput57, po52$enc_48);
po52$enc_48 = xor(keyinput58, po52$enc_47);
po52$enc_47 = xor(keyinput59, po52$enc_46);
po52$enc_46 = xor(keyinput60, po52$enc_45);
po52$enc_45 = xor(keyinput61, po52$enc_44);
po52$enc_44 = xor(keyinput62, po52$enc_43);
po52$enc_43 = xor(keyinput63, po52$enc_42);
po52$enc_42 = xor(keyinput64, po52$enc_41);
po52$enc_41 = xor(keyinput65, po52$enc_40);
po52$enc_40 = xor(keyinput66, po52$enc_39);
po52$enc_39 = xor(keyinput67, po52$enc_38);
po52$enc_38 = xor(keyinput68, po52$enc_37);
po52$enc_37 = xor(keyinput69, po52$enc_36);
po52$enc_36 = xor(keyinput70, po52$enc_35);
po52$enc_35 = xor(keyinput71, po52$enc_34);
po52$enc_34 = xor(keyinput72, po52$enc_33);
po52$enc_33 = xor(keyinput73, po52$enc_32);
po52$enc_32 = xor(keyinput74, po52$enc_31);
po52$enc_31 = xor(keyinput75, po52$enc_30);
po52$enc_30 = xor(keyinput76, po52$enc_29);
po52$enc_29 = xor(keyinput77, po52$enc_28);
po52$enc_28 = xor(keyinput78, po52$enc_27);
po52$enc_27 = xor(keyinput79, po52$enc_26);
po52$enc_26 = xor(keyinput80, po52$enc_25);
po52$enc_25 = xor(keyinput81, po52$enc_24);
po52$enc_24 = xor(keyinput82, po52$enc_23);
po52$enc_23 = xor(keyinput83, po52$enc_22);
po52$enc_22 = xor(keyinput84, po52$enc_21);
po52$enc_21 = xor(keyinput85, po52$enc_20);
po52$enc_20 = xor(keyinput86, po52$enc_19);
po52$enc_19 = xor(keyinput87, po52$enc_18);
po52$enc_18 = xor(keyinput88, po52$enc_17);
po52$enc_17 = xor(keyinput89, po52$enc_16);
po52$enc_16 = xor(keyinput90, po52$enc_15);
po52$enc_15 = xor(keyinput91, po52$enc_14);
po52$enc_14 = xor(keyinput92, po52$enc_13);
po52$enc_13 = xor(keyinput93, po52$enc_12);
po52$enc_12 = xor(keyinput94, po52$enc_11);
po52$enc_11 = xor(keyinput95, po52$enc_10);
po52$enc_10 = xor(keyinput96, po52$enc_9);
po52$enc_9 = xor(keyinput97, po52$enc_8);
po52$enc_8 = xor(keyinput98, po52$enc_7);
po52$enc_7 = xor(keyinput99, po52$enc_6);
po52$enc_6 = xor(keyinput100, po52$enc_5);
po52$enc_5 = xor(keyinput101, po52$enc_4);
po52$enc_4 = xor(keyinput102, po52$enc_3);
po52$enc_3 = xor(keyinput103, po52$enc_2);
po52$enc_2 = xor(keyinput104, po52$enc_1);
po52$enc_1 = xor(keyinput105, po52);

#locking next scan-cell in scan-chain
po53$enc = xor(keyinput53, po53$enc_53);
po53$enc_53 = xor(keyinput54, po53$enc_52);
po53$enc_52 = xor(keyinput55, po53$enc_51);
po53$enc_51 = xor(keyinput56, po53$enc_50);
po53$enc_50 = xor(keyinput57, po53$enc_49);
po53$enc_49 = xor(keyinput58, po53$enc_48);
po53$enc_48 = xor(keyinput59, po53$enc_47);
po53$enc_47 = xor(keyinput60, po53$enc_46);
po53$enc_46 = xor(keyinput61, po53$enc_45);
po53$enc_45 = xor(keyinput62, po53$enc_44);
po53$enc_44 = xor(keyinput63, po53$enc_43);
po53$enc_43 = xor(keyinput64, po53$enc_42);
po53$enc_42 = xor(keyinput65, po53$enc_41);
po53$enc_41 = xor(keyinput66, po53$enc_40);
po53$enc_40 = xor(keyinput67, po53$enc_39);
po53$enc_39 = xor(keyinput68, po53$enc_38);
po53$enc_38 = xor(keyinput69, po53$enc_37);
po53$enc_37 = xor(keyinput70, po53$enc_36);
po53$enc_36 = xor(keyinput71, po53$enc_35);
po53$enc_35 = xor(keyinput72, po53$enc_34);
po53$enc_34 = xor(keyinput73, po53$enc_33);
po53$enc_33 = xor(keyinput74, po53$enc_32);
po53$enc_32 = xor(keyinput75, po53$enc_31);
po53$enc_31 = xor(keyinput76, po53$enc_30);
po53$enc_30 = xor(keyinput77, po53$enc_29);
po53$enc_29 = xor(keyinput78, po53$enc_28);
po53$enc_28 = xor(keyinput79, po53$enc_27);
po53$enc_27 = xor(keyinput80, po53$enc_26);
po53$enc_26 = xor(keyinput81, po53$enc_25);
po53$enc_25 = xor(keyinput82, po53$enc_24);
po53$enc_24 = xor(keyinput83, po53$enc_23);
po53$enc_23 = xor(keyinput84, po53$enc_22);
po53$enc_22 = xor(keyinput85, po53$enc_21);
po53$enc_21 = xor(keyinput86, po53$enc_20);
po53$enc_20 = xor(keyinput87, po53$enc_19);
po53$enc_19 = xor(keyinput88, po53$enc_18);
po53$enc_18 = xor(keyinput89, po53$enc_17);
po53$enc_17 = xor(keyinput90, po53$enc_16);
po53$enc_16 = xor(keyinput91, po53$enc_15);
po53$enc_15 = xor(keyinput92, po53$enc_14);
po53$enc_14 = xor(keyinput93, po53$enc_13);
po53$enc_13 = xor(keyinput94, po53$enc_12);
po53$enc_12 = xor(keyinput95, po53$enc_11);
po53$enc_11 = xor(keyinput96, po53$enc_10);
po53$enc_10 = xor(keyinput97, po53$enc_9);
po53$enc_9 = xor(keyinput98, po53$enc_8);
po53$enc_8 = xor(keyinput99, po53$enc_7);
po53$enc_7 = xor(keyinput100, po53$enc_6);
po53$enc_6 = xor(keyinput101, po53$enc_5);
po53$enc_5 = xor(keyinput102, po53$enc_4);
po53$enc_4 = xor(keyinput103, po53$enc_3);
po53$enc_3 = xor(keyinput104, po53$enc_2);
po53$enc_2 = xor(keyinput105, po53$enc_1);
po53$enc_1 = xor(keyinput106, po53);

#locking next scan-cell in scan-chain
po54$enc = xor(keyinput53, po54$enc_54);
po54$enc_54 = xor(keyinput54, po54$enc_53);
po54$enc_53 = xor(keyinput55, po54$enc_52);
po54$enc_52 = xor(keyinput56, po54$enc_51);
po54$enc_51 = xor(keyinput57, po54$enc_50);
po54$enc_50 = xor(keyinput58, po54$enc_49);
po54$enc_49 = xor(keyinput59, po54$enc_48);
po54$enc_48 = xor(keyinput60, po54$enc_47);
po54$enc_47 = xor(keyinput61, po54$enc_46);
po54$enc_46 = xor(keyinput62, po54$enc_45);
po54$enc_45 = xor(keyinput63, po54$enc_44);
po54$enc_44 = xor(keyinput64, po54$enc_43);
po54$enc_43 = xor(keyinput65, po54$enc_42);
po54$enc_42 = xor(keyinput66, po54$enc_41);
po54$enc_41 = xor(keyinput67, po54$enc_40);
po54$enc_40 = xor(keyinput68, po54$enc_39);
po54$enc_39 = xor(keyinput69, po54$enc_38);
po54$enc_38 = xor(keyinput70, po54$enc_37);
po54$enc_37 = xor(keyinput71, po54$enc_36);
po54$enc_36 = xor(keyinput72, po54$enc_35);
po54$enc_35 = xor(keyinput73, po54$enc_34);
po54$enc_34 = xor(keyinput74, po54$enc_33);
po54$enc_33 = xor(keyinput75, po54$enc_32);
po54$enc_32 = xor(keyinput76, po54$enc_31);
po54$enc_31 = xor(keyinput77, po54$enc_30);
po54$enc_30 = xor(keyinput78, po54$enc_29);
po54$enc_29 = xor(keyinput79, po54$enc_28);
po54$enc_28 = xor(keyinput80, po54$enc_27);
po54$enc_27 = xor(keyinput81, po54$enc_26);
po54$enc_26 = xor(keyinput82, po54$enc_25);
po54$enc_25 = xor(keyinput83, po54$enc_24);
po54$enc_24 = xor(keyinput84, po54$enc_23);
po54$enc_23 = xor(keyinput85, po54$enc_22);
po54$enc_22 = xor(keyinput86, po54$enc_21);
po54$enc_21 = xor(keyinput87, po54$enc_20);
po54$enc_20 = xor(keyinput88, po54$enc_19);
po54$enc_19 = xor(keyinput89, po54$enc_18);
po54$enc_18 = xor(keyinput90, po54$enc_17);
po54$enc_17 = xor(keyinput91, po54$enc_16);
po54$enc_16 = xor(keyinput92, po54$enc_15);
po54$enc_15 = xor(keyinput93, po54$enc_14);
po54$enc_14 = xor(keyinput94, po54$enc_13);
po54$enc_13 = xor(keyinput95, po54$enc_12);
po54$enc_12 = xor(keyinput96, po54$enc_11);
po54$enc_11 = xor(keyinput97, po54$enc_10);
po54$enc_10 = xor(keyinput98, po54$enc_9);
po54$enc_9 = xor(keyinput99, po54$enc_8);
po54$enc_8 = xor(keyinput100, po54$enc_7);
po54$enc_7 = xor(keyinput101, po54$enc_6);
po54$enc_6 = xor(keyinput102, po54$enc_5);
po54$enc_5 = xor(keyinput103, po54$enc_4);
po54$enc_4 = xor(keyinput104, po54$enc_3);
po54$enc_3 = xor(keyinput105, po54$enc_2);
po54$enc_2 = xor(keyinput106, po54$enc_1);
po54$enc_1 = xor(keyinput107, po54);

#locking next scan-cell in scan-chain
po55$enc = xor(keyinput53, po55$enc_55);
po55$enc_55 = xor(keyinput54, po55$enc_54);
po55$enc_54 = xor(keyinput55, po55$enc_53);
po55$enc_53 = xor(keyinput56, po55$enc_52);
po55$enc_52 = xor(keyinput57, po55$enc_51);
po55$enc_51 = xor(keyinput58, po55$enc_50);
po55$enc_50 = xor(keyinput59, po55$enc_49);
po55$enc_49 = xor(keyinput60, po55$enc_48);
po55$enc_48 = xor(keyinput61, po55$enc_47);
po55$enc_47 = xor(keyinput62, po55$enc_46);
po55$enc_46 = xor(keyinput63, po55$enc_45);
po55$enc_45 = xor(keyinput64, po55$enc_44);
po55$enc_44 = xor(keyinput65, po55$enc_43);
po55$enc_43 = xor(keyinput66, po55$enc_42);
po55$enc_42 = xor(keyinput67, po55$enc_41);
po55$enc_41 = xor(keyinput68, po55$enc_40);
po55$enc_40 = xor(keyinput69, po55$enc_39);
po55$enc_39 = xor(keyinput70, po55$enc_38);
po55$enc_38 = xor(keyinput71, po55$enc_37);
po55$enc_37 = xor(keyinput72, po55$enc_36);
po55$enc_36 = xor(keyinput73, po55$enc_35);
po55$enc_35 = xor(keyinput74, po55$enc_34);
po55$enc_34 = xor(keyinput75, po55$enc_33);
po55$enc_33 = xor(keyinput76, po55$enc_32);
po55$enc_32 = xor(keyinput77, po55$enc_31);
po55$enc_31 = xor(keyinput78, po55$enc_30);
po55$enc_30 = xor(keyinput79, po55$enc_29);
po55$enc_29 = xor(keyinput80, po55$enc_28);
po55$enc_28 = xor(keyinput81, po55$enc_27);
po55$enc_27 = xor(keyinput82, po55$enc_26);
po55$enc_26 = xor(keyinput83, po55$enc_25);
po55$enc_25 = xor(keyinput84, po55$enc_24);
po55$enc_24 = xor(keyinput85, po55$enc_23);
po55$enc_23 = xor(keyinput86, po55$enc_22);
po55$enc_22 = xor(keyinput87, po55$enc_21);
po55$enc_21 = xor(keyinput88, po55$enc_20);
po55$enc_20 = xor(keyinput89, po55$enc_19);
po55$enc_19 = xor(keyinput90, po55$enc_18);
po55$enc_18 = xor(keyinput91, po55$enc_17);
po55$enc_17 = xor(keyinput92, po55$enc_16);
po55$enc_16 = xor(keyinput93, po55$enc_15);
po55$enc_15 = xor(keyinput94, po55$enc_14);
po55$enc_14 = xor(keyinput95, po55$enc_13);
po55$enc_13 = xor(keyinput96, po55$enc_12);
po55$enc_12 = xor(keyinput97, po55$enc_11);
po55$enc_11 = xor(keyinput98, po55$enc_10);
po55$enc_10 = xor(keyinput99, po55$enc_9);
po55$enc_9 = xor(keyinput100, po55$enc_8);
po55$enc_8 = xor(keyinput101, po55$enc_7);
po55$enc_7 = xor(keyinput102, po55$enc_6);
po55$enc_6 = xor(keyinput103, po55$enc_5);
po55$enc_5 = xor(keyinput104, po55$enc_4);
po55$enc_4 = xor(keyinput105, po55$enc_3);
po55$enc_3 = xor(keyinput106, po55$enc_2);
po55$enc_2 = xor(keyinput107, po55$enc_1);
po55$enc_1 = xor(keyinput108, po55);

#locking next scan-cell in scan-chain
po56$enc = xor(keyinput53, po56$enc_56);
po56$enc_56 = xor(keyinput54, po56$enc_55);
po56$enc_55 = xor(keyinput55, po56$enc_54);
po56$enc_54 = xor(keyinput56, po56$enc_53);
po56$enc_53 = xor(keyinput57, po56$enc_52);
po56$enc_52 = xor(keyinput58, po56$enc_51);
po56$enc_51 = xor(keyinput59, po56$enc_50);
po56$enc_50 = xor(keyinput60, po56$enc_49);
po56$enc_49 = xor(keyinput61, po56$enc_48);
po56$enc_48 = xor(keyinput62, po56$enc_47);
po56$enc_47 = xor(keyinput63, po56$enc_46);
po56$enc_46 = xor(keyinput64, po56$enc_45);
po56$enc_45 = xor(keyinput65, po56$enc_44);
po56$enc_44 = xor(keyinput66, po56$enc_43);
po56$enc_43 = xor(keyinput67, po56$enc_42);
po56$enc_42 = xor(keyinput68, po56$enc_41);
po56$enc_41 = xor(keyinput69, po56$enc_40);
po56$enc_40 = xor(keyinput70, po56$enc_39);
po56$enc_39 = xor(keyinput71, po56$enc_38);
po56$enc_38 = xor(keyinput72, po56$enc_37);
po56$enc_37 = xor(keyinput73, po56$enc_36);
po56$enc_36 = xor(keyinput74, po56$enc_35);
po56$enc_35 = xor(keyinput75, po56$enc_34);
po56$enc_34 = xor(keyinput76, po56$enc_33);
po56$enc_33 = xor(keyinput77, po56$enc_32);
po56$enc_32 = xor(keyinput78, po56$enc_31);
po56$enc_31 = xor(keyinput79, po56$enc_30);
po56$enc_30 = xor(keyinput80, po56$enc_29);
po56$enc_29 = xor(keyinput81, po56$enc_28);
po56$enc_28 = xor(keyinput82, po56$enc_27);
po56$enc_27 = xor(keyinput83, po56$enc_26);
po56$enc_26 = xor(keyinput84, po56$enc_25);
po56$enc_25 = xor(keyinput85, po56$enc_24);
po56$enc_24 = xor(keyinput86, po56$enc_23);
po56$enc_23 = xor(keyinput87, po56$enc_22);
po56$enc_22 = xor(keyinput88, po56$enc_21);
po56$enc_21 = xor(keyinput89, po56$enc_20);
po56$enc_20 = xor(keyinput90, po56$enc_19);
po56$enc_19 = xor(keyinput91, po56$enc_18);
po56$enc_18 = xor(keyinput92, po56$enc_17);
po56$enc_17 = xor(keyinput93, po56$enc_16);
po56$enc_16 = xor(keyinput94, po56$enc_15);
po56$enc_15 = xor(keyinput95, po56$enc_14);
po56$enc_14 = xor(keyinput96, po56$enc_13);
po56$enc_13 = xor(keyinput97, po56$enc_12);
po56$enc_12 = xor(keyinput98, po56$enc_11);
po56$enc_11 = xor(keyinput99, po56$enc_10);
po56$enc_10 = xor(keyinput100, po56$enc_9);
po56$enc_9 = xor(keyinput101, po56$enc_8);
po56$enc_8 = xor(keyinput102, po56$enc_7);
po56$enc_7 = xor(keyinput103, po56$enc_6);
po56$enc_6 = xor(keyinput104, po56$enc_5);
po56$enc_5 = xor(keyinput105, po56$enc_4);
po56$enc_4 = xor(keyinput106, po56$enc_3);
po56$enc_3 = xor(keyinput107, po56$enc_2);
po56$enc_2 = xor(keyinput108, po56$enc_1);
po56$enc_1 = xor(keyinput109, po56enc);

#locking next scan-cell in scan-chain
po57$enc = xor(keyinput53, po57$enc_57);
po57$enc_57 = xor(keyinput54, po57$enc_56);
po57$enc_56 = xor(keyinput55, po57$enc_55);
po57$enc_55 = xor(keyinput56, po57$enc_54);
po57$enc_54 = xor(keyinput57, po57$enc_53);
po57$enc_53 = xor(keyinput58, po57$enc_52);
po57$enc_52 = xor(keyinput59, po57$enc_51);
po57$enc_51 = xor(keyinput60, po57$enc_50);
po57$enc_50 = xor(keyinput61, po57$enc_49);
po57$enc_49 = xor(keyinput62, po57$enc_48);
po57$enc_48 = xor(keyinput63, po57$enc_47);
po57$enc_47 = xor(keyinput64, po57$enc_46);
po57$enc_46 = xor(keyinput65, po57$enc_45);
po57$enc_45 = xor(keyinput66, po57$enc_44);
po57$enc_44 = xor(keyinput67, po57$enc_43);
po57$enc_43 = xor(keyinput68, po57$enc_42);
po57$enc_42 = xor(keyinput69, po57$enc_41);
po57$enc_41 = xor(keyinput70, po57$enc_40);
po57$enc_40 = xor(keyinput71, po57$enc_39);
po57$enc_39 = xor(keyinput72, po57$enc_38);
po57$enc_38 = xor(keyinput73, po57$enc_37);
po57$enc_37 = xor(keyinput74, po57$enc_36);
po57$enc_36 = xor(keyinput75, po57$enc_35);
po57$enc_35 = xor(keyinput76, po57$enc_34);
po57$enc_34 = xor(keyinput77, po57$enc_33);
po57$enc_33 = xor(keyinput78, po57$enc_32);
po57$enc_32 = xor(keyinput79, po57$enc_31);
po57$enc_31 = xor(keyinput80, po57$enc_30);
po57$enc_30 = xor(keyinput81, po57$enc_29);
po57$enc_29 = xor(keyinput82, po57$enc_28);
po57$enc_28 = xor(keyinput83, po57$enc_27);
po57$enc_27 = xor(keyinput84, po57$enc_26);
po57$enc_26 = xor(keyinput85, po57$enc_25);
po57$enc_25 = xor(keyinput86, po57$enc_24);
po57$enc_24 = xor(keyinput87, po57$enc_23);
po57$enc_23 = xor(keyinput88, po57$enc_22);
po57$enc_22 = xor(keyinput89, po57$enc_21);
po57$enc_21 = xor(keyinput90, po57$enc_20);
po57$enc_20 = xor(keyinput91, po57$enc_19);
po57$enc_19 = xor(keyinput92, po57$enc_18);
po57$enc_18 = xor(keyinput93, po57$enc_17);
po57$enc_17 = xor(keyinput94, po57$enc_16);
po57$enc_16 = xor(keyinput95, po57$enc_15);
po57$enc_15 = xor(keyinput96, po57$enc_14);
po57$enc_14 = xor(keyinput97, po57$enc_13);
po57$enc_13 = xor(keyinput98, po57$enc_12);
po57$enc_12 = xor(keyinput99, po57$enc_11);
po57$enc_11 = xor(keyinput100, po57$enc_10);
po57$enc_10 = xor(keyinput101, po57$enc_9);
po57$enc_9 = xor(keyinput102, po57$enc_8);
po57$enc_8 = xor(keyinput103, po57$enc_7);
po57$enc_7 = xor(keyinput104, po57$enc_6);
po57$enc_6 = xor(keyinput105, po57$enc_5);
po57$enc_5 = xor(keyinput106, po57$enc_4);
po57$enc_4 = xor(keyinput107, po57$enc_3);
po57$enc_3 = xor(keyinput108, po57$enc_2);
po57$enc_2 = xor(keyinput109, po57$enc_1);
po57$enc_1 = xor(keyinput110, po57);

#locking next scan-cell in scan-chain
po58$enc = xor(keyinput53, po58$enc_58);
po58$enc_58 = xor(keyinput54, po58$enc_57);
po58$enc_57 = xor(keyinput55, po58$enc_56);
po58$enc_56 = xor(keyinput56, po58$enc_55);
po58$enc_55 = xor(keyinput57, po58$enc_54);
po58$enc_54 = xor(keyinput58, po58$enc_53);
po58$enc_53 = xor(keyinput59, po58$enc_52);
po58$enc_52 = xor(keyinput60, po58$enc_51);
po58$enc_51 = xor(keyinput61, po58$enc_50);
po58$enc_50 = xor(keyinput62, po58$enc_49);
po58$enc_49 = xor(keyinput63, po58$enc_48);
po58$enc_48 = xor(keyinput64, po58$enc_47);
po58$enc_47 = xor(keyinput65, po58$enc_46);
po58$enc_46 = xor(keyinput66, po58$enc_45);
po58$enc_45 = xor(keyinput67, po58$enc_44);
po58$enc_44 = xor(keyinput68, po58$enc_43);
po58$enc_43 = xor(keyinput69, po58$enc_42);
po58$enc_42 = xor(keyinput70, po58$enc_41);
po58$enc_41 = xor(keyinput71, po58$enc_40);
po58$enc_40 = xor(keyinput72, po58$enc_39);
po58$enc_39 = xor(keyinput73, po58$enc_38);
po58$enc_38 = xor(keyinput74, po58$enc_37);
po58$enc_37 = xor(keyinput75, po58$enc_36);
po58$enc_36 = xor(keyinput76, po58$enc_35);
po58$enc_35 = xor(keyinput77, po58$enc_34);
po58$enc_34 = xor(keyinput78, po58$enc_33);
po58$enc_33 = xor(keyinput79, po58$enc_32);
po58$enc_32 = xor(keyinput80, po58$enc_31);
po58$enc_31 = xor(keyinput81, po58$enc_30);
po58$enc_30 = xor(keyinput82, po58$enc_29);
po58$enc_29 = xor(keyinput83, po58$enc_28);
po58$enc_28 = xor(keyinput84, po58$enc_27);
po58$enc_27 = xor(keyinput85, po58$enc_26);
po58$enc_26 = xor(keyinput86, po58$enc_25);
po58$enc_25 = xor(keyinput87, po58$enc_24);
po58$enc_24 = xor(keyinput88, po58$enc_23);
po58$enc_23 = xor(keyinput89, po58$enc_22);
po58$enc_22 = xor(keyinput90, po58$enc_21);
po58$enc_21 = xor(keyinput91, po58$enc_20);
po58$enc_20 = xor(keyinput92, po58$enc_19);
po58$enc_19 = xor(keyinput93, po58$enc_18);
po58$enc_18 = xor(keyinput94, po58$enc_17);
po58$enc_17 = xor(keyinput95, po58$enc_16);
po58$enc_16 = xor(keyinput96, po58$enc_15);
po58$enc_15 = xor(keyinput97, po58$enc_14);
po58$enc_14 = xor(keyinput98, po58$enc_13);
po58$enc_13 = xor(keyinput99, po58$enc_12);
po58$enc_12 = xor(keyinput100, po58$enc_11);
po58$enc_11 = xor(keyinput101, po58$enc_10);
po58$enc_10 = xor(keyinput102, po58$enc_9);
po58$enc_9 = xor(keyinput103, po58$enc_8);
po58$enc_8 = xor(keyinput104, po58$enc_7);
po58$enc_7 = xor(keyinput105, po58$enc_6);
po58$enc_6 = xor(keyinput106, po58$enc_5);
po58$enc_5 = xor(keyinput107, po58$enc_4);
po58$enc_4 = xor(keyinput108, po58$enc_3);
po58$enc_3 = xor(keyinput109, po58$enc_2);
po58$enc_2 = xor(keyinput110, po58$enc_1);
po58$enc_1 = xor(keyinput111, po58);

#locking next scan-cell in scan-chain
po59$enc = xor(keyinput53, po59$enc_59);
po59$enc_59 = xor(keyinput54, po59$enc_58);
po59$enc_58 = xor(keyinput55, po59$enc_57);
po59$enc_57 = xor(keyinput56, po59$enc_56);
po59$enc_56 = xor(keyinput57, po59$enc_55);
po59$enc_55 = xor(keyinput58, po59$enc_54);
po59$enc_54 = xor(keyinput59, po59$enc_53);
po59$enc_53 = xor(keyinput60, po59$enc_52);
po59$enc_52 = xor(keyinput61, po59$enc_51);
po59$enc_51 = xor(keyinput62, po59$enc_50);
po59$enc_50 = xor(keyinput63, po59$enc_49);
po59$enc_49 = xor(keyinput64, po59$enc_48);
po59$enc_48 = xor(keyinput65, po59$enc_47);
po59$enc_47 = xor(keyinput66, po59$enc_46);
po59$enc_46 = xor(keyinput67, po59$enc_45);
po59$enc_45 = xor(keyinput68, po59$enc_44);
po59$enc_44 = xor(keyinput69, po59$enc_43);
po59$enc_43 = xor(keyinput70, po59$enc_42);
po59$enc_42 = xor(keyinput71, po59$enc_41);
po59$enc_41 = xor(keyinput72, po59$enc_40);
po59$enc_40 = xor(keyinput73, po59$enc_39);
po59$enc_39 = xor(keyinput74, po59$enc_38);
po59$enc_38 = xor(keyinput75, po59$enc_37);
po59$enc_37 = xor(keyinput76, po59$enc_36);
po59$enc_36 = xor(keyinput77, po59$enc_35);
po59$enc_35 = xor(keyinput78, po59$enc_34);
po59$enc_34 = xor(keyinput79, po59$enc_33);
po59$enc_33 = xor(keyinput80, po59$enc_32);
po59$enc_32 = xor(keyinput81, po59$enc_31);
po59$enc_31 = xor(keyinput82, po59$enc_30);
po59$enc_30 = xor(keyinput83, po59$enc_29);
po59$enc_29 = xor(keyinput84, po59$enc_28);
po59$enc_28 = xor(keyinput85, po59$enc_27);
po59$enc_27 = xor(keyinput86, po59$enc_26);
po59$enc_26 = xor(keyinput87, po59$enc_25);
po59$enc_25 = xor(keyinput88, po59$enc_24);
po59$enc_24 = xor(keyinput89, po59$enc_23);
po59$enc_23 = xor(keyinput90, po59$enc_22);
po59$enc_22 = xor(keyinput91, po59$enc_21);
po59$enc_21 = xor(keyinput92, po59$enc_20);
po59$enc_20 = xor(keyinput93, po59$enc_19);
po59$enc_19 = xor(keyinput94, po59$enc_18);
po59$enc_18 = xor(keyinput95, po59$enc_17);
po59$enc_17 = xor(keyinput96, po59$enc_16);
po59$enc_16 = xor(keyinput97, po59$enc_15);
po59$enc_15 = xor(keyinput98, po59$enc_14);
po59$enc_14 = xor(keyinput99, po59$enc_13);
po59$enc_13 = xor(keyinput100, po59$enc_12);
po59$enc_12 = xor(keyinput101, po59$enc_11);
po59$enc_11 = xor(keyinput102, po59$enc_10);
po59$enc_10 = xor(keyinput103, po59$enc_9);
po59$enc_9 = xor(keyinput104, po59$enc_8);
po59$enc_8 = xor(keyinput105, po59$enc_7);
po59$enc_7 = xor(keyinput106, po59$enc_6);
po59$enc_6 = xor(keyinput107, po59$enc_5);
po59$enc_5 = xor(keyinput108, po59$enc_4);
po59$enc_4 = xor(keyinput109, po59$enc_3);
po59$enc_3 = xor(keyinput110, po59$enc_2);
po59$enc_2 = xor(keyinput111, po59$enc_1);
po59$enc_1 = xor(keyinput112, po59);

#locking next scan-cell in scan-chain
po60$enc = xor(keyinput53, po60$enc_60);
po60$enc_60 = xor(keyinput54, po60$enc_59);
po60$enc_59 = xor(keyinput55, po60$enc_58);
po60$enc_58 = xor(keyinput56, po60$enc_57);
po60$enc_57 = xor(keyinput57, po60$enc_56);
po60$enc_56 = xor(keyinput58, po60$enc_55);
po60$enc_55 = xor(keyinput59, po60$enc_54);
po60$enc_54 = xor(keyinput60, po60$enc_53);
po60$enc_53 = xor(keyinput61, po60$enc_52);
po60$enc_52 = xor(keyinput62, po60$enc_51);
po60$enc_51 = xor(keyinput63, po60$enc_50);
po60$enc_50 = xor(keyinput64, po60$enc_49);
po60$enc_49 = xor(keyinput65, po60$enc_48);
po60$enc_48 = xor(keyinput66, po60$enc_47);
po60$enc_47 = xor(keyinput67, po60$enc_46);
po60$enc_46 = xor(keyinput68, po60$enc_45);
po60$enc_45 = xor(keyinput69, po60$enc_44);
po60$enc_44 = xor(keyinput70, po60$enc_43);
po60$enc_43 = xor(keyinput71, po60$enc_42);
po60$enc_42 = xor(keyinput72, po60$enc_41);
po60$enc_41 = xor(keyinput73, po60$enc_40);
po60$enc_40 = xor(keyinput74, po60$enc_39);
po60$enc_39 = xor(keyinput75, po60$enc_38);
po60$enc_38 = xor(keyinput76, po60$enc_37);
po60$enc_37 = xor(keyinput77, po60$enc_36);
po60$enc_36 = xor(keyinput78, po60$enc_35);
po60$enc_35 = xor(keyinput79, po60$enc_34);
po60$enc_34 = xor(keyinput80, po60$enc_33);
po60$enc_33 = xor(keyinput81, po60$enc_32);
po60$enc_32 = xor(keyinput82, po60$enc_31);
po60$enc_31 = xor(keyinput83, po60$enc_30);
po60$enc_30 = xor(keyinput84, po60$enc_29);
po60$enc_29 = xor(keyinput85, po60$enc_28);
po60$enc_28 = xor(keyinput86, po60$enc_27);
po60$enc_27 = xor(keyinput87, po60$enc_26);
po60$enc_26 = xor(keyinput88, po60$enc_25);
po60$enc_25 = xor(keyinput89, po60$enc_24);
po60$enc_24 = xor(keyinput90, po60$enc_23);
po60$enc_23 = xor(keyinput91, po60$enc_22);
po60$enc_22 = xor(keyinput92, po60$enc_21);
po60$enc_21 = xor(keyinput93, po60$enc_20);
po60$enc_20 = xor(keyinput94, po60$enc_19);
po60$enc_19 = xor(keyinput95, po60$enc_18);
po60$enc_18 = xor(keyinput96, po60$enc_17);
po60$enc_17 = xor(keyinput97, po60$enc_16);
po60$enc_16 = xor(keyinput98, po60$enc_15);
po60$enc_15 = xor(keyinput99, po60$enc_14);
po60$enc_14 = xor(keyinput100, po60$enc_13);
po60$enc_13 = xor(keyinput101, po60$enc_12);
po60$enc_12 = xor(keyinput102, po60$enc_11);
po60$enc_11 = xor(keyinput103, po60$enc_10);
po60$enc_10 = xor(keyinput104, po60$enc_9);
po60$enc_9 = xor(keyinput105, po60$enc_8);
po60$enc_8 = xor(keyinput106, po60$enc_7);
po60$enc_7 = xor(keyinput107, po60$enc_6);
po60$enc_6 = xor(keyinput108, po60$enc_5);
po60$enc_5 = xor(keyinput109, po60$enc_4);
po60$enc_4 = xor(keyinput110, po60$enc_3);
po60$enc_3 = xor(keyinput111, po60$enc_2);
po60$enc_2 = xor(keyinput112, po60$enc_1);
po60$enc_1 = xor(keyinput113, po60);

#locking next scan-cell in scan-chain
po61$enc = xor(keyinput53, po61$enc_61);
po61$enc_61 = xor(keyinput54, po61$enc_60);
po61$enc_60 = xor(keyinput55, po61$enc_59);
po61$enc_59 = xor(keyinput56, po61$enc_58);
po61$enc_58 = xor(keyinput57, po61$enc_57);
po61$enc_57 = xor(keyinput58, po61$enc_56);
po61$enc_56 = xor(keyinput59, po61$enc_55);
po61$enc_55 = xor(keyinput60, po61$enc_54);
po61$enc_54 = xor(keyinput61, po61$enc_53);
po61$enc_53 = xor(keyinput62, po61$enc_52);
po61$enc_52 = xor(keyinput63, po61$enc_51);
po61$enc_51 = xor(keyinput64, po61$enc_50);
po61$enc_50 = xor(keyinput65, po61$enc_49);
po61$enc_49 = xor(keyinput66, po61$enc_48);
po61$enc_48 = xor(keyinput67, po61$enc_47);
po61$enc_47 = xor(keyinput68, po61$enc_46);
po61$enc_46 = xor(keyinput69, po61$enc_45);
po61$enc_45 = xor(keyinput70, po61$enc_44);
po61$enc_44 = xor(keyinput71, po61$enc_43);
po61$enc_43 = xor(keyinput72, po61$enc_42);
po61$enc_42 = xor(keyinput73, po61$enc_41);
po61$enc_41 = xor(keyinput74, po61$enc_40);
po61$enc_40 = xor(keyinput75, po61$enc_39);
po61$enc_39 = xor(keyinput76, po61$enc_38);
po61$enc_38 = xor(keyinput77, po61$enc_37);
po61$enc_37 = xor(keyinput78, po61$enc_36);
po61$enc_36 = xor(keyinput79, po61$enc_35);
po61$enc_35 = xor(keyinput80, po61$enc_34);
po61$enc_34 = xor(keyinput81, po61$enc_33);
po61$enc_33 = xor(keyinput82, po61$enc_32);
po61$enc_32 = xor(keyinput83, po61$enc_31);
po61$enc_31 = xor(keyinput84, po61$enc_30);
po61$enc_30 = xor(keyinput85, po61$enc_29);
po61$enc_29 = xor(keyinput86, po61$enc_28);
po61$enc_28 = xor(keyinput87, po61$enc_27);
po61$enc_27 = xor(keyinput88, po61$enc_26);
po61$enc_26 = xor(keyinput89, po61$enc_25);
po61$enc_25 = xor(keyinput90, po61$enc_24);
po61$enc_24 = xor(keyinput91, po61$enc_23);
po61$enc_23 = xor(keyinput92, po61$enc_22);
po61$enc_22 = xor(keyinput93, po61$enc_21);
po61$enc_21 = xor(keyinput94, po61$enc_20);
po61$enc_20 = xor(keyinput95, po61$enc_19);
po61$enc_19 = xor(keyinput96, po61$enc_18);
po61$enc_18 = xor(keyinput97, po61$enc_17);
po61$enc_17 = xor(keyinput98, po61$enc_16);
po61$enc_16 = xor(keyinput99, po61$enc_15);
po61$enc_15 = xor(keyinput100, po61$enc_14);
po61$enc_14 = xor(keyinput101, po61$enc_13);
po61$enc_13 = xor(keyinput102, po61$enc_12);
po61$enc_12 = xor(keyinput103, po61$enc_11);
po61$enc_11 = xor(keyinput104, po61$enc_10);
po61$enc_10 = xor(keyinput105, po61$enc_9);
po61$enc_9 = xor(keyinput106, po61$enc_8);
po61$enc_8 = xor(keyinput107, po61$enc_7);
po61$enc_7 = xor(keyinput108, po61$enc_6);
po61$enc_6 = xor(keyinput109, po61$enc_5);
po61$enc_5 = xor(keyinput110, po61$enc_4);
po61$enc_4 = xor(keyinput111, po61$enc_3);
po61$enc_3 = xor(keyinput112, po61$enc_2);
po61$enc_2 = xor(keyinput113, po61$enc_1);
po61$enc_1 = xor(keyinput114, po61enc);

#locking next scan-cell in scan-chain
po62$enc = xor(keyinput53, po62$enc_62);
po62$enc_62 = xor(keyinput54, po62$enc_61);
po62$enc_61 = xor(keyinput55, po62$enc_60);
po62$enc_60 = xor(keyinput56, po62$enc_59);
po62$enc_59 = xor(keyinput57, po62$enc_58);
po62$enc_58 = xor(keyinput58, po62$enc_57);
po62$enc_57 = xor(keyinput59, po62$enc_56);
po62$enc_56 = xor(keyinput60, po62$enc_55);
po62$enc_55 = xor(keyinput61, po62$enc_54);
po62$enc_54 = xor(keyinput62, po62$enc_53);
po62$enc_53 = xor(keyinput63, po62$enc_52);
po62$enc_52 = xor(keyinput64, po62$enc_51);
po62$enc_51 = xor(keyinput65, po62$enc_50);
po62$enc_50 = xor(keyinput66, po62$enc_49);
po62$enc_49 = xor(keyinput67, po62$enc_48);
po62$enc_48 = xor(keyinput68, po62$enc_47);
po62$enc_47 = xor(keyinput69, po62$enc_46);
po62$enc_46 = xor(keyinput70, po62$enc_45);
po62$enc_45 = xor(keyinput71, po62$enc_44);
po62$enc_44 = xor(keyinput72, po62$enc_43);
po62$enc_43 = xor(keyinput73, po62$enc_42);
po62$enc_42 = xor(keyinput74, po62$enc_41);
po62$enc_41 = xor(keyinput75, po62$enc_40);
po62$enc_40 = xor(keyinput76, po62$enc_39);
po62$enc_39 = xor(keyinput77, po62$enc_38);
po62$enc_38 = xor(keyinput78, po62$enc_37);
po62$enc_37 = xor(keyinput79, po62$enc_36);
po62$enc_36 = xor(keyinput80, po62$enc_35);
po62$enc_35 = xor(keyinput81, po62$enc_34);
po62$enc_34 = xor(keyinput82, po62$enc_33);
po62$enc_33 = xor(keyinput83, po62$enc_32);
po62$enc_32 = xor(keyinput84, po62$enc_31);
po62$enc_31 = xor(keyinput85, po62$enc_30);
po62$enc_30 = xor(keyinput86, po62$enc_29);
po62$enc_29 = xor(keyinput87, po62$enc_28);
po62$enc_28 = xor(keyinput88, po62$enc_27);
po62$enc_27 = xor(keyinput89, po62$enc_26);
po62$enc_26 = xor(keyinput90, po62$enc_25);
po62$enc_25 = xor(keyinput91, po62$enc_24);
po62$enc_24 = xor(keyinput92, po62$enc_23);
po62$enc_23 = xor(keyinput93, po62$enc_22);
po62$enc_22 = xor(keyinput94, po62$enc_21);
po62$enc_21 = xor(keyinput95, po62$enc_20);
po62$enc_20 = xor(keyinput96, po62$enc_19);
po62$enc_19 = xor(keyinput97, po62$enc_18);
po62$enc_18 = xor(keyinput98, po62$enc_17);
po62$enc_17 = xor(keyinput99, po62$enc_16);
po62$enc_16 = xor(keyinput100, po62$enc_15);
po62$enc_15 = xor(keyinput101, po62$enc_14);
po62$enc_14 = xor(keyinput102, po62$enc_13);
po62$enc_13 = xor(keyinput103, po62$enc_12);
po62$enc_12 = xor(keyinput104, po62$enc_11);
po62$enc_11 = xor(keyinput105, po62$enc_10);
po62$enc_10 = xor(keyinput106, po62$enc_9);
po62$enc_9 = xor(keyinput107, po62$enc_8);
po62$enc_8 = xor(keyinput108, po62$enc_7);
po62$enc_7 = xor(keyinput109, po62$enc_6);
po62$enc_6 = xor(keyinput110, po62$enc_5);
po62$enc_5 = xor(keyinput111, po62$enc_4);
po62$enc_4 = xor(keyinput112, po62$enc_3);
po62$enc_3 = xor(keyinput113, po62$enc_2);
po62$enc_2 = xor(keyinput114, po62$enc_1);
po62$enc_1 = xor(keyinput115, po62);
