
##################################Primary Inputs for Unroll-1
INPUT(LINE1_1)
INPUT(LINE2_1)


##################################Primary Inputs for Unroll-2
INPUT(LINE1_2)
INPUT(LINE2_2)


##################################Primary Inputs for Unroll-3
INPUT(LINE1_3)
INPUT(LINE2_3)


##################################Primary Outputs for Unroll-1
OUTPUT(OUTP_REG_1)
OUTPUT(OVERFLW_REG_1)


##################################Primary Outputs for Unroll-2
OUTPUT(OUTP_REG_2)
OUTPUT(OVERFLW_REG_2)


##################################Primary Outputs for Unroll-3
OUTPUT(OUTP_REG_3)
OUTPUT(OVERFLW_REG_3)

##################################Other Inputs
INPUT(OVERFLW_REG_1)
INPUT(STATO_REG_2__1)
INPUT(STATO_REG_1__1)
INPUT(STATO_REG_0__1)
INPUT(OUTP_REG_1)

##################################Other Outputs
OUTPUT(U34_3$enc)
OUTPUT(U45_3$enc)
OUTPUT(U36_3$enc)
OUTPUT(U35_3$enc)
OUTPUT(U44_3$enc)

#################################Key Inputs
INPUT(keyinput0)
INPUT(keyinput1)
INPUT(keyinput2)
INPUT(keyinput3)
INPUT(keyinput4)

#################################SeqL Key Inputs
INPUT(keyinput5)
INPUT(keyinput6)
INPUT(keyinput7)
INPUT(keyinput8)
INPUT(keyinput9)
INPUT(keyinput10)
INPUT(keyinput11)
INPUT(keyinput12)


#Other flip-flops Stage connection logic

#SeqL-locked flip-flops Stage connection logic
OVERFLW_REG_2 = BUF(U34_1enc)
OVERFLW_REG_3 = BUF(U34_2enc)
OVERFLW_REG_4 = BUF(U34_3enc)

#SeqL-locked flip-flops Stage connection logic
STATO_REG_2__2 = BUF(U45_1enc)
STATO_REG_2__3 = BUF(U45_2enc)
STATO_REG_2__4 = BUF(U45_3enc)

#SeqL-locked flip-flops Stage connection logic
STATO_REG_1__2 = BUF(U36_1enc)
STATO_REG_1__3 = BUF(U36_2enc)
STATO_REG_1__4 = BUF(U36_3enc)

#SeqL-locked flip-flops Stage connection logic
STATO_REG_0__2 = BUF(U35_1enc)
STATO_REG_0__3 = BUF(U35_2enc)
STATO_REG_0__4 = BUF(U35_3enc)
OUTP_REG_2 = BUF(U44_1)
OUTP_REG_3 = BUF(U44_2)
OUTP_REG_4 = BUF(U44_3)






U34_1= AND(STATO_REG_1__1enc, U38_1, STATO_REG_0__1enc)
U35_1= NAND(U68_1, U67_1, U66_1, U65_1)
U36_1= NAND(U57_1, U55_1, U56_1)
U37_1= OR(LINE2_1, LINE1_1)
U38_1= NOT(STATO_REG_2__1enc)
U39_1= NOT(STATO_REG_1__1enc)
U40_1= NOT(LINE2_1)
U41_1= NOT(LINE1_1)
U42_1= NOT(STATO_REG_0__1enc)
U43_1= NAND(STATO_REG_1__1enc, U42_1)
U44_1= NAND(U73_1, U72_1)
U45_1= NAND(U60_1, U59_1)
U46_1= NAND(U70_1, U69_1)
U47_1= NAND(LINE1_1, LINE2_1)
U48_1= NAND(STATO_REG_2__1enc, U43_1)
U49_1= NOT(U37_1)
U50_1= NAND(U49_1, U42_1)
U51_1= NOT(U47_1)
U52_1= NOT(U43_1)
U53_1= NAND(U47_1, U43_1)
U54_1= NAND(STATO_REG_2__1enc, U47_1)
U55_1= NAND(STATO_REG_0__1enc, U39_1, U47_1)
U56_1= NAND(U52_1, U54_1)
U57_1= NAND(U62_1, U61_1, STATO_REG_2__1enc)
U58_1= NOT(U48_1)
U59_1= NAND(U53_1, U38_1)
U60_1= NAND(U50_1, U39_1, STATO_REG_2__1enc)
U61_1= NAND(STATO_REG_1__1enc, U49_1)
U62_1= NAND(U37_1, U42_1)
U63_1= NAND(STATO_REG_0__1enc, U47_1)
U64_1= NAND(U51_1, U42_1)
U65_1= NAND(U64_1, U63_1, U39_1, U38_1)
U66_1= NAND(U43_1, U37_1, STATO_REG_2__1enc)
U67_1= NAND(U34_1, U47_1)
U68_1= NAND(U51_1, U52_1)
U69_1= NAND(LINE1_1, U40_1)
U70_1= NAND(LINE2_1, U41_1)
U71_1= NOT(U46_1)
U72_1= NAND(U58_1, U71_1)
U73_1= NAND(U46_1, U48_1)






U34_2= AND(STATO_REG_1__2enc, U38_2, STATO_REG_0__2enc)
U35_2= NAND(U68_2, U67_2, U66_2, U65_2)
U36_2= NAND(U57_2, U55_2, U56_2)
U37_2= OR(LINE2_2, LINE1_2)
U38_2= NOT(STATO_REG_2__2enc)
U39_2= NOT(STATO_REG_1__2enc)
U40_2= NOT(LINE2_2)
U41_2= NOT(LINE1_2)
U42_2= NOT(STATO_REG_0__2enc)
U43_2= NAND(STATO_REG_1__2enc, U42_2)
U44_2= NAND(U73_2, U72_2)
U45_2= NAND(U60_2, U59_2)
U46_2= NAND(U70_2, U69_2)
U47_2= NAND(LINE1_2, LINE2_2)
U48_2= NAND(STATO_REG_2__2enc, U43_2)
U49_2= NOT(U37_2)
U50_2= NAND(U49_2, U42_2)
U51_2= NOT(U47_2)
U52_2= NOT(U43_2)
U53_2= NAND(U47_2, U43_2)
U54_2= NAND(STATO_REG_2__2enc, U47_2)
U55_2= NAND(STATO_REG_0__2enc, U39_2, U47_2)
U56_2= NAND(U52_2, U54_2)
U57_2= NAND(U62_2, U61_2, STATO_REG_2__2enc)
U58_2= NOT(U48_2)
U59_2= NAND(U53_2, U38_2)
U60_2= NAND(U50_2, U39_2, STATO_REG_2__2enc)
U61_2= NAND(STATO_REG_1__2enc, U49_2)
U62_2= NAND(U37_2, U42_2)
U63_2= NAND(STATO_REG_0__2enc, U47_2)
U64_2= NAND(U51_2, U42_2)
U65_2= NAND(U64_2, U63_2, U39_2, U38_2)
U66_2= NAND(U43_2, U37_2, STATO_REG_2__2enc)
U67_2= NAND(U34_2, U47_2)
U68_2= NAND(U51_2, U52_2)
U69_2= NAND(LINE1_2, U40_2)
U70_2= NAND(LINE2_2, U41_2)
U71_2= NOT(U46_2)
U72_2= NAND(U58_2, U71_2)
U73_2= NAND(U46_2, U48_2)






U34_3= AND(STATO_REG_1__3enc, U38_3, STATO_REG_0__3enc)
U35_3= NAND(U68_3, U67_3, U66_3, U65_3)
U36_3= NAND(U57_3, U55_3, U56_3)
U37_3= OR(LINE2_3, LINE1_3)
U38_3= NOT(STATO_REG_2__3enc)
U39_3= NOT(STATO_REG_1__3enc)
U40_3= NOT(LINE2_3)
U41_3= NOT(LINE1_3)
U42_3= NOT(STATO_REG_0__3enc)
U43_3= NAND(STATO_REG_1__3enc, U42_3)
U44_3= NAND(U73_3, U72_3)
U45_3= NAND(U60_3, U59_3)
U46_3= NAND(U70_3, U69_3)
U47_3= NAND(LINE1_3, LINE2_3)
U48_3= NAND(STATO_REG_2__3enc, U43_3)
U49_3= NOT(U37_3)
U50_3= NAND(U49_3, U42_3)
U51_3= NOT(U47_3)
U52_3= NOT(U43_3)
U53_3= NAND(U47_3, U43_3)
U54_3= NAND(STATO_REG_2__3enc, U47_3)
U55_3= NAND(STATO_REG_0__3enc, U39_3, U47_3)
U56_3= NAND(U52_3, U54_3)
U57_3= NAND(U62_3, U61_3, STATO_REG_2__3enc)
U58_3= NOT(U48_3)
U59_3= NAND(U53_3, U38_3)
U60_3= NAND(U50_3, U39_3, STATO_REG_2__3enc)
U61_3= NAND(STATO_REG_1__3enc, U49_3)
U62_3= NAND(U37_3, U42_3)
U63_3= NAND(STATO_REG_0__3enc, U47_3)
U64_3= NAND(U51_3, U42_3)
U65_3= NAND(U64_3, U63_3, U39_3, U38_3)
U66_3= NAND(U43_3, U37_3, STATO_REG_2__3enc)
U67_3= NAND(U34_3, U47_3)
U68_3= NAND(U51_3, U52_3)
U69_3= NAND(LINE1_3, U40_3)
U70_3= NAND(LINE2_3, U41_3)
U71_3= NOT(U46_3)
U72_3= NAND(U58_3, U71_3)
U73_3= NAND(U46_3, U48_3)


#SeqL Flip-flop Additional Output encryption logic for OVERFLW_REG
OVERFLW_REG_1enc = XOR(OVERFLW_REG_1encenc, keyinput6)
OVERFLW_REG_2enc = XOR(OVERFLW_REG_2, keyinput6)
OVERFLW_REG_3enc = XOR(OVERFLW_REG_3, keyinput6)

#SeqL Flip-flop Additional Input encryption logic for U34
U34_1enc = XOR(U34_1, keyinput5)
U34_2enc = XOR(U34_2, keyinput5)
U34_3enc = XOR(U34_3, keyinput5)

#SeqL Flip-flop Additional Output encryption logic for STATO_REG_2_
STATO_REG_2__1enc = XOR(STATO_REG_2__1encenc, keyinput8)
STATO_REG_2__2enc = XOR(STATO_REG_2__2, keyinput8)
STATO_REG_2__3enc = XOR(STATO_REG_2__3, keyinput8)

#SeqL Flip-flop Additional Input encryption logic for U45
U45_1enc = XOR(U45_1, keyinput7)
U45_2enc = XOR(U45_2, keyinput7)
U45_3enc = XOR(U45_3, keyinput7)

#SeqL Flip-flop Additional Output encryption logic for STATO_REG_1_
STATO_REG_1__1enc = XOR(STATO_REG_1__1encenc, keyinput10)
STATO_REG_1__2enc = XOR(STATO_REG_1__2, keyinput10)
STATO_REG_1__3enc = XOR(STATO_REG_1__3, keyinput10)

#SeqL Flip-flop Additional Input encryption logic for U36
U36_1enc = XOR(U36_1, keyinput9)
U36_2enc = XOR(U36_2, keyinput9)
U36_3enc = XOR(U36_3, keyinput9)

#SeqL Flip-flop Additional Output encryption logic for STATO_REG_0_
STATO_REG_0__1enc = XOR(STATO_REG_0__1encenc, keyinput12)
STATO_REG_0__2enc = XOR(STATO_REG_0__2, keyinput12)
STATO_REG_0__3enc = XOR(STATO_REG_0__3, keyinput12)

#SeqL Flip-flop Additional Input encryption logic for U35
U35_1enc = XOR(U35_1, keyinput11)
U35_2enc = XOR(U35_2, keyinput11)
U35_3enc = XOR(U35_3, keyinput11)

#Other Flip-flop Output logic for OUTP_REG
OUTP_REG_1enc = BUF(OUTP_REG_1)
OUTP_REG_2enc = BUF(OUTP_REG_2)
OUTP_REG_3enc = BUF(OUTP_REG_3)

#Input encryption logic for OVERFLW_REG
OVERFLW_REG_1encenc = XOR(OVERFLW_REG_1, keyinput0)

#Output encryption logic for U34
U34_3$enc_0 = XOR(U34_3enc, keyinput0)
U34_3$enc_1 = XOR(U34_3$enc_0, keyinput1)
U34_3$enc_2 = XOR(U34_3$enc_1, keyinput2)
U34_3$enc_3 = XOR(U34_3$enc_2, keyinput3)
U34_3$enc = XOR(U34_3$enc_3, keyinput4)


#Input encryption logic for STATO_REG_2_
STATO_REG_2__1enc_0 = XOR(STATO_REG_2__1, keyinput0)
STATO_REG_2__1encenc = XOR(STATO_REG_2__1enc_0, keyinput1)

#Output encryption logic for U45
U45_3$enc_0 = XOR(U45_3enc, keyinput1)
U45_3$enc_1 = XOR(U45_3$enc_0, keyinput2)
U45_3$enc_2 = XOR(U45_3$enc_1, keyinput3)
U45_3$enc = XOR(U45_3$enc_2, keyinput4)


#Input encryption logic for STATO_REG_1_
STATO_REG_1__1enc_0 = XOR(STATO_REG_1__1, keyinput0)
STATO_REG_1__1enc_1 = XOR(STATO_REG_1__1enc_0, keyinput1)
STATO_REG_1__1encenc = XOR(STATO_REG_1__1enc_1, keyinput2)

#Output encryption logic for U36
U36_3$enc_0 = XOR(U36_3enc, keyinput2)
U36_3$enc_1 = XOR(U36_3$enc_0, keyinput3)
U36_3$enc = XOR(U36_3$enc_1, keyinput4)


#Input encryption logic for STATO_REG_0_
STATO_REG_0__1enc_0 = XOR(STATO_REG_0__1, keyinput0)
STATO_REG_0__1enc_1 = XOR(STATO_REG_0__1enc_0, keyinput1)
STATO_REG_0__1enc_2 = XOR(STATO_REG_0__1enc_1, keyinput2)
STATO_REG_0__1encenc = XOR(STATO_REG_0__1enc_2, keyinput3)

#Output encryption logic for U35
U35_3$enc_0 = XOR(U35_3enc, keyinput3)
U35_3$enc = XOR(U35_3$enc_0, keyinput4)


#Input encryption logic for OUTP_REG
OUTP_REG_1enc_0 = XOR(OUTP_REG_1, keyinput0)
OUTP_REG_1enc_1 = XOR(OUTP_REG_1enc_0, keyinput1)
OUTP_REG_1enc_2 = XOR(OUTP_REG_1enc_1, keyinput2)
OUTP_REG_1enc_3 = XOR(OUTP_REG_1enc_2, keyinput3)
OUTP_REG_1enc = XOR(OUTP_REG_1enc_3, keyinput4)

#Output encryption logic for U44
U44_3$enc = XOR(U44_3, keyinput4)

